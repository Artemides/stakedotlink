{
  "address": "0xBdf93A71Dc50120bc9Cf3524E5d077481746110b",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_stakingToken",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "AllowanceMinted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "allowanceToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "rewardsPool",
          "type": "address"
        }
      ],
      "name": "RewardTokenAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "RewardTokenRemoved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "RewardsWithdrawn",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Staked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Withdrawn",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_allowanceToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_rewardPool",
          "type": "address"
        }
      ],
      "name": "addRewardToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "allowanceTokens",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "exit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "mintAllowance",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_allowanceToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        }
      ],
      "name": "mintedAllowance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_sender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_value",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "onTokenTransfer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "_index",
          "type": "uint16"
        }
      ],
      "name": "removeRewardToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "rewardPools",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "name": "rewardTokens",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "stake",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "stakingToken",
      "outputs": [
        {
          "internalType": "contract IERC677",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalRewardTokens",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalStaked",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdrawAllRewards",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xee65b88e56ed20fc7062892d772c08b386fa0e1a1afa6ccad6f55c42712c1946",
  "receipt": {
    "to": null,
    "from": "0x11187eff852069a33d102476b2E8A9cc9167dAde",
    "contractAddress": "0xBdf93A71Dc50120bc9Cf3524E5d077481746110b",
    "transactionIndex": 0,
    "gasUsed": "1317482",
    "logsBloom": "0x
    "blockHash": "0xf51a1ae1f9eb436d6bb378a202e3be327a2ac7b1994eae40acfd6b26ab8c6182",
    "transactionHash": "0xee65b88e56ed20fc7062892d772c08b386fa0e1a1afa6ccad6f55c42712c1946",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 989456,
        "transactionHash": "0xee65b88e56ed20fc7062892d772c08b386fa0e1a1afa6ccad6f55c42712c1946",
        "address": "0xBdf93A71Dc50120bc9Cf3524E5d077481746110b",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x00000000000000000000000011187eff852069a33d102476b2e8a9cc9167dade"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0xf51a1ae1f9eb436d6bb378a202e3be327a2ac7b1994eae40acfd6b26ab8c6182"
      }
    ],
    "blockNumber": 989456,
    "cumulativeGasUsed": "1317482",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xD24498c10fF699F12c80DAc4d94C13E0dF38b78b"
  ],
  "numDeployments": 1,
  "solcInputHash": "716f7ec369ec5237ed83445c47c46fa6",
  "metadata": "{\"compiler\":{\"version\":\"0.8.15+commit.e14f2714\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_stakingToken\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"AllowanceMinted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"allowanceToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"rewardsPool\",\"type\":\"address\"}],\"name\":\"RewardTokenAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"RewardTokenRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"RewardsWithdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Staked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdrawn\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_allowanceToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_rewardPool\",\"type\":\"address\"}],\"name\":\"addRewardToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowanceTokens\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"exit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mintAllowance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_allowanceToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"mintedAllowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onTokenTransfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_index\",\"type\":\"uint16\"}],\"name\":\"removeRewardToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"rewardPools\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"name\":\"rewardTokens\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakingToken\",\"outputs\":[{\"internalType\":\"contract IERC677\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalRewardTokens\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalStaked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawAllRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Handles owners token staking, allowance token distribution, & owners rewards assets\",\"kind\":\"dev\",\"methods\":{\"addRewardToken(address,address,address)\":{\"details\":\"adds a new asset\",\"params\":{\"_allowanceToken\":\"asset pool allowance token to add\",\"_rewardPool\":\"asset reward pool to add*\",\"_token\":\"asset to add\"}},\"balanceOf(address)\":{\"details\":\"returns a user's staked balance\",\"params\":{\"_account\":\"user to return balance for\"},\"returns\":{\"_0\":\"user's staked balance*\"}},\"exit()\":{\"details\":\"withdraws users earned rewards for all assets and withdraws their owners tokens*\"},\"mintAllowance()\":{\"details\":\"mints a user's unclaimed allowance tokens (used if a new asset is added after a user has already staked)*\"},\"mintedAllowance(address,address)\":{\"details\":\"returns how many allowance tokens have been minted for a user\",\"params\":{\"_account\":\"user to return minted amount for\",\"_allowanceToken\":\"allowance token to return minted amount for\"},\"returns\":{\"_0\":\"total allowance tokens a user has minted*\"}},\"onTokenTransfer(address,uint256,bytes)\":{\"details\":\"ERC677 implementation that proxies staking\",\"params\":{\"_sender\":\"of the token transfer\",\"_value\":\"of the token transfer*\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"removeRewardToken(uint16)\":{\"details\":\"removes an existing asset\",\"params\":{\"_index\":\"index of asset to remove*\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"stake(uint256)\":{\"details\":\"stakes owners tokens & mints staking allowance tokens in return\",\"params\":{\"_amount\":\"amount to stake*\"}},\"totalSupply()\":{\"details\":\"returns total amount staked\",\"returns\":{\"_0\":\"total amount staked*\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"withdraw(uint256)\":{\"details\":\"burns staking allowance tokens and withdraws staked owners tokens\",\"params\":{\"_amount\":\"amount to withdraw*\"}},\"withdrawAllRewards()\":{\"details\":\"withdraws user's earned rewards for a all assets*\"}},\"title\":\"Pool Owners\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/core/test/v1/PoolOwnersV1.sol\":\"PoolOwnersV1\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x0e9621f60b2faabe65549f7ed0f24e8853a45c1b7990d47e8160e523683f3935\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xf41ca991f30855bf80ffd11e9347856a517b977f0a6c2d52e6421a99b7840329\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/draft-IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x032807210d1d7d218963d7355d62e021a84bf1b3339f4f50be2f63b53cccaf29\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd6153ce99bcdcce22b124f755e72553295be6abcd63804cfdffceb188b8bef10\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"contracts/core/interfaces/IERC677.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.15;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IERC677 is IERC20 {\\n    function transferAndCall(\\n        address _to,\\n        uint256 _value,\\n        bytes calldata _data\\n    ) external returns (bool success);\\n}\\n\",\"keccak256\":\"0x85fb796082bc45f2eb85a84af73983fdfefed6ff9acbc936373d45360a5973cf\",\"license\":\"UNLICENSED\"},\"contracts/core/test/v1/PoolOwnersV1.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.15;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\nimport \\\"../../interfaces/IERC677.sol\\\";\\n\\ninterface IOwnersRewardsPool is IERC20 {\\n    function updateReward(address _account) external;\\n\\n    function depositReward(uint256 _reward) external;\\n\\n    function withdraw(address _account) external;\\n\\n    function withdraw() external;\\n}\\n\\ninterface IPoolAllowance is IERC20 {\\n    function mintAllowance(address _account, uint256 _amount) external;\\n\\n    function burnAllowance(address _account, uint256 _amount) external;\\n}\\n\\n/**\\n * @title Pool Owners\\n * @dev Handles owners token staking, allowance token distribution, & owners rewards assets\\n */\\ncontract PoolOwnersV1 is ReentrancyGuard, Ownable {\\n    using SafeERC20 for IERC677;\\n\\n    IERC677 public stakingToken;\\n    uint256 public totalStaked;\\n    mapping(address => uint256) private stakedBalances;\\n\\n    uint16 public totalRewardTokens;\\n    mapping(uint16 => address) public rewardTokens;\\n    mapping(address => address) public rewardPools;\\n    mapping(address => address) public allowanceTokens;\\n    mapping(address => mapping(address => uint256)) private mintedAllowanceTokens;\\n\\n    event Staked(address indexed user, uint256 amount);\\n    event Withdrawn(address indexed user, uint256 amount);\\n    event RewardsWithdrawn(address indexed user);\\n    event AllowanceMinted(address indexed user);\\n    event RewardTokenAdded(address indexed token, address allowanceToken, address rewardsPool);\\n    event RewardTokenRemoved(address indexed token);\\n\\n    constructor(address _stakingToken) {\\n        stakingToken = IERC677(_stakingToken);\\n    }\\n\\n    modifier updateRewards(address _account) {\\n        for (uint16 i = 0; i < totalRewardTokens; i++) {\\n            IOwnersRewardsPool(rewardPools[rewardTokens[i]]).updateReward(_account);\\n        }\\n        _;\\n    }\\n\\n    /**\\n     * @dev returns a user's staked balance\\n     * @param _account user to return balance for\\n     * @return user's staked balance\\n     **/\\n    function balanceOf(address _account) public view returns (uint256) {\\n        return stakedBalances[_account];\\n    }\\n\\n    /**\\n     * @dev returns how many allowance tokens have been minted for a user\\n     * @param _allowanceToken allowance token to return minted amount for\\n     * @param _account user to return minted amount for\\n     * @return total allowance tokens a user has minted\\n     **/\\n    function mintedAllowance(address _allowanceToken, address _account) public view returns (uint256) {\\n        return mintedAllowanceTokens[_allowanceToken][_account];\\n    }\\n\\n    /**\\n     * @dev returns total amount staked\\n     * @return total amount staked\\n     **/\\n    function totalSupply() public view returns (uint256) {\\n        return totalStaked;\\n    }\\n\\n    /**\\n     * @dev ERC677 implementation that proxies staking\\n     * @param _sender of the token transfer\\n     * @param _value of the token transfer\\n     **/\\n    function onTokenTransfer(\\n        address _sender,\\n        uint256 _value,\\n        bytes calldata\\n    ) external nonReentrant {\\n        require(msg.sender == address(stakingToken), \\\"Sender must be staking token\\\");\\n        _stake(_sender, _value);\\n    }\\n\\n    /**\\n     * @dev stakes owners tokens & mints staking allowance tokens in return\\n     * @param _amount amount to stake\\n     **/\\n    function stake(uint256 _amount) external nonReentrant {\\n        stakingToken.safeTransferFrom(msg.sender, address(this), _amount);\\n        _stake(msg.sender, _amount);\\n    }\\n\\n    /**\\n     * @dev burns staking allowance tokens and withdraws staked owners tokens\\n     * @param _amount amount to withdraw\\n     **/\\n    function withdraw(uint256 _amount) public nonReentrant updateRewards(msg.sender) {\\n        stakedBalances[msg.sender] = stakedBalances[msg.sender] - _amount;\\n        totalStaked -= _amount;\\n        _burnAllowance(msg.sender);\\n        stakingToken.safeTransfer(msg.sender, _amount);\\n        emit Withdrawn(msg.sender, _amount);\\n    }\\n\\n    /**\\n     * @dev withdraws user's earned rewards for a all assets\\n     **/\\n    function withdrawAllRewards() public nonReentrant {\\n        for (uint16 i = 0; i < totalRewardTokens; i++) {\\n            _withdrawReward(rewardTokens[i], msg.sender);\\n        }\\n        emit RewardsWithdrawn(msg.sender);\\n    }\\n\\n    /**\\n     * @dev withdraws users earned rewards for all assets and withdraws their owners tokens\\n     **/\\n    function exit() external {\\n        withdraw(balanceOf(msg.sender));\\n        withdrawAllRewards();\\n    }\\n\\n    /**\\n     * @dev mints a user's unclaimed allowance tokens (used if a new asset is added\\n     * after a user has already staked)\\n     **/\\n    function mintAllowance() external nonReentrant {\\n        _mintAllowance(msg.sender);\\n        emit AllowanceMinted(msg.sender);\\n    }\\n\\n    /**\\n     * @dev adds a new asset\\n     * @param _token asset to add\\n     * @param _allowanceToken asset pool allowance token to add\\n     * @param _rewardPool asset reward pool to add\\n     **/\\n    function addRewardToken(\\n        address _token,\\n        address _allowanceToken,\\n        address _rewardPool\\n    ) external onlyOwner {\\n        require(rewardPools[_token] == address(0), \\\"Reward token already exists\\\");\\n        rewardTokens[totalRewardTokens] = _token;\\n        allowanceTokens[_token] = _allowanceToken;\\n        rewardPools[_token] = _rewardPool;\\n        totalRewardTokens++;\\n        emit RewardTokenAdded(_token, _allowanceToken, _rewardPool);\\n    }\\n\\n    /**\\n     * @dev removes an existing asset\\n     * @param _index index of asset to remove\\n     **/\\n    function removeRewardToken(uint16 _index) external onlyOwner {\\n        require(_index < totalRewardTokens, \\\"Reward token does not exist\\\");\\n        address token = rewardTokens[_index];\\n        if (totalRewardTokens > 1) {\\n            rewardTokens[_index] = rewardTokens[totalRewardTokens - 1];\\n        }\\n        delete rewardTokens[totalRewardTokens - 1];\\n        delete allowanceTokens[token];\\n        delete rewardPools[token];\\n        totalRewardTokens--;\\n        emit RewardTokenRemoved(token);\\n    }\\n\\n    /**\\n     * @dev stakes owners tokens & mints staking allowance tokens in return\\n     * @param _amount amount to stake\\n     **/\\n    function _stake(address _sender, uint256 _amount) private updateRewards(_sender) {\\n        stakedBalances[_sender] = stakedBalances[_sender] + _amount;\\n        totalStaked += _amount;\\n        _mintAllowance(_sender);\\n        emit Staked(_sender, _amount);\\n    }\\n\\n    /**\\n     * @dev withdraws rewards for a specific asset & account\\n     * @param _token asset to withdraw\\n     * @param _account user to withdraw for\\n     **/\\n    function _withdrawReward(address _token, address _account) private {\\n        require(rewardPools[_token] != address(0), \\\"Reward token does not exist\\\");\\n        IOwnersRewardsPool(rewardPools[_token]).withdraw(_account);\\n    }\\n\\n    /**\\n     * @dev mints allowance tokens based on a user's staked balance\\n     * @param _account user to mint tokens for\\n     **/\\n    function _mintAllowance(address _account) private {\\n        uint256 stakedAmount = balanceOf(_account);\\n        for (uint16 i = 0; i < totalRewardTokens; i++) {\\n            address token = allowanceTokens[rewardTokens[i]];\\n            uint256 minted = mintedAllowance(token, _account);\\n            if (minted < stakedAmount) {\\n                IPoolAllowance(token).mintAllowance(_account, stakedAmount - minted);\\n                mintedAllowanceTokens[token][_account] = stakedAmount;\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev burns allowance tokens based on a user's staked balance\\n     * @param _account user to burn tokens for\\n     **/\\n    function _burnAllowance(address _account) private {\\n        uint256 stakedAmount = balanceOf(_account);\\n        for (uint16 i = 0; i < totalRewardTokens; i++) {\\n            address token = allowanceTokens[rewardTokens[i]];\\n            uint256 minted = mintedAllowance(token, _account);\\n            if (minted > stakedAmount) {\\n                IPoolAllowance(token).burnAllowance(_account, minted - stakedAmount);\\n                mintedAllowanceTokens[token][_account] = stakedAmount;\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf0fa235508485bb4df7e60d0c81f04bf98d9de982e604029aba44785be314445\",\"license\":\"UNLICENSED\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5060405161168638038061168683398101604081905261002f916100b4565b600160005561003d33610062565b600280546001600160a01b0319166001600160a01b03929092169190911790556100e4565b600180546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6000602082840312156100c657600080fd5b81516001600160a01b03811681146100dd57600080fd5b9392505050565b611593806100f36000396000f3fe608060405234801561001057600080fd5b506004361061012c5760003560e01c8063715018a6116100ad578063a4c0ed3611610071578063a4c0ed3614610293578063a694fc3a146102a6578063e9fad8ee146102b9578063ef2149ba146102c1578063f2fde38b146102ea57600080fd5b8063715018a61461024b57806372f702f314610253578063817b1cd2146102665780638da5cb5b1461026f5780639c4239501461028057600080fd5b8063372d9448116100f4578063372d9448146101d6578063396876bd146101ff57806345114ee5146102075780634b48599d1461020f57806370a082311461022257600080fd5b806314706f3e1461013157806318160ddd146101575780631b0875a61461015f5780632e1a7d4d146101805780633203ea8f14610195575b600080fd5b61014461013f36600461128d565b6102fd565b6040519081526020015b60405180910390f35b600354610144565b60055461016d9061ffff1681565b60405161ffff909116815260200161014e565b61019361018e3660046112c0565b610328565b005b6101be6101a33660046112d9565b6006602052600090815260409020546001600160a01b031681565b6040516001600160a01b03909116815260200161014e565b6101be6101e43660046112fd565b6007602052600090815260409020546001600160a01b031681565b6101936104a7565b610193610509565b61019361021d366004611318565b6105b1565b6101446102303660046112fd565b6001600160a01b031660009081526004602052604090205490565b610193610709565b6002546101be906001600160a01b031681565b61014460035481565b6001546001600160a01b03166101be565b61019361028e3660046112d9565b61071d565b6101936102a136600461135b565b6108e0565b6101936102b43660046112c0565b610976565b6101936109c7565b6101be6102cf3660046112fd565b6008602052600090815260409020546001600160a01b031681565b6101936102f83660046112fd565b6109e8565b6001600160a01b03918216600090815260096020908152604080832093909416825291909152205490565b6002600054036103535760405162461bcd60e51b815260040161034a906113e2565b60405180910390fd5b6002600090815533905b60055461ffff90811690821610156104025761ffff81166000908152600660209081526040808320546001600160a01b03908116845260079092529182902054915163632447c960e01b8152848216600482015291169063632447c990602401600060405180830381600087803b1580156103d757600080fd5b505af11580156103eb573d6000803e3d6000fd5b5050505080806103fa9061142f565b91505061035d565b503360009081526004602052604090205461041e908390611450565b3360009081526004602052604081209190915560038054849290610443908490611450565b90915550610452905033610a61565b600254610469906001600160a01b03163384610b8b565b60405182815233907f7084f5476618d8e60b11ef0d7d3f06914655adb8793e28ff7f018d4c76d505d59060200160405180910390a250506001600055565b6002600054036104c95760405162461bcd60e51b815260040161034a906113e2565b60026000556104d733610bee565b60405133907fbf0116af1f8ddd1320e0d5708a1f7bd67f71d8c96d369b4084ba1b91ab7f7b1890600090a26001600055565b60026000540361052b5760405162461bcd60e51b815260040161034a906113e2565b600260009081555b60055461ffff908116908216101561057e5761ffff811660009081526006602052604090205461056c906001600160a01b031633610d13565b806105768161142f565b915050610533565b5060405133907fd5e5e23ba670ad7ae775ba2dd622861c8f5e59940127ddb42d0ada3bdfe8881990600090a26001600055565b6105b9610dec565b6001600160a01b0383811660009081526007602052604090205416156106215760405162461bcd60e51b815260206004820152601b60248201527f52657761726420746f6b656e20616c7265616479206578697374730000000000604482015260640161034a565b6005805461ffff908116600090815260066020908152604080832080546001600160a01b03199081166001600160a01b038b8116918217909355855260088452828520805482168a841617905560079093529083208054909216908616179055825490911691906106918361142f565b91906101000a81548161ffff021916908361ffff16021790555050826001600160a01b03167fdc569ae656a2a291bea4cbb0b556071ffff75a5aff570f9d300a176344bde53a83836040516106fc9291906001600160a01b0392831681529116602082015260400190565b60405180910390a2505050565b610711610dec565b61071b6000610e46565b565b610725610dec565b60055461ffff9081169082161061077e5760405162461bcd60e51b815260206004820152601b60248201527f52657761726420746f6b656e20646f6573206e6f742065786973740000000000604482015260640161034a565b61ffff8082166000908152600660205260409020546005546001600160a01b039091169160019116111561080b576005546006906000906107c59060019061ffff16611467565b61ffff9081168252602080830193909352604091820160009081205491861681526006909352912080546001600160a01b0319166001600160a01b039092169190911790555b6005546006906000906108249060019061ffff16611467565b61ffff90811682526020808301939093526040918201600090812080546001600160a01b03199081169091556001600160a01b0386168252600885528382208054821690556007909452918220805490931690925560058054909216919061088b8361148a565b91906101000a81548161ffff021916908361ffff16021790555050806001600160a01b03167f66257bcef574219c04f7c05f7a1c78d599da10491294c92a5805c48b4cdf500960405160405180910390a25050565b6002600054036109025760405162461bcd60e51b815260040161034a906113e2565b60026000819055546001600160a01b031633146109615760405162461bcd60e51b815260206004820152601c60248201527f53656e646572206d757374206265207374616b696e6720746f6b656e00000000604482015260640161034a565b61096b8484610e98565b505060016000555050565b6002600054036109985760405162461bcd60e51b815260040161034a906113e2565b60026000819055546109b5906001600160a01b0316333084610fde565b6109bf3382610e98565b506001600055565b336000908152600460205260409020546109e090610328565b61071b610509565b6109f0610dec565b6001600160a01b038116610a555760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b606482015260840161034a565b610a5e81610e46565b50565b6001600160a01b038116600090815260046020526040812054905b60055461ffff9081169082161015610b865761ffff81166000908152600660209081526040808320546001600160a01b03908116845260089092528220541690610ac682866102fd565b905083811115610b71576001600160a01b038216630d99bd6c86610aea8785611450565b6040516001600160e01b031960e085901b1681526001600160a01b0390921660048301526024820152604401600060405180830381600087803b158015610b3057600080fd5b505af1158015610b44573d6000803e3d6000fd5b5050506001600160a01b038084166000908152600960209081526040808320938a16835292905220859055505b50508080610b7e9061142f565b915050610a7c565b505050565b6040516001600160a01b038316602482015260448101829052610b8690849063a9059cbb60e01b906064015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b03199093169290921790915261101c565b6001600160a01b038116600090815260046020526040812054905b60055461ffff9081169082161015610b865761ffff81166000908152600660209081526040808320546001600160a01b03908116845260089092528220541690610c5382866102fd565b905083811015610cfe576001600160a01b0382166308641c8686610c778488611450565b6040516001600160e01b031960e085901b1681526001600160a01b0390921660048301526024820152604401600060405180830381600087803b158015610cbd57600080fd5b505af1158015610cd1573d6000803e3d6000fd5b5050506001600160a01b038084166000908152600960209081526040808320938a16835292905220859055505b50508080610d0b9061142f565b915050610c09565b6001600160a01b0382811660009081526007602052604090205416610d7a5760405162461bcd60e51b815260206004820152601b60248201527f52657761726420746f6b656e20646f6573206e6f742065786973740000000000604482015260640161034a565b6001600160a01b03828116600090815260076020526040908190205490516351cff8d960e01b815283831660048201529116906351cff8d990602401600060405180830381600087803b158015610dd057600080fd5b505af1158015610de4573d6000803e3d6000fd5b505050505050565b6001546001600160a01b0316331461071b5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161034a565b600180546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b8160005b60055461ffff9081169082161015610f415761ffff81166000908152600660209081526040808320546001600160a01b03908116845260079092529182902054915163632447c960e01b8152848216600482015291169063632447c990602401600060405180830381600087803b158015610f1657600080fd5b505af1158015610f2a573d6000803e3d6000fd5b505050508080610f399061142f565b915050610e9c565b506001600160a01b038316600090815260046020526040902054610f669083906114a8565b6001600160a01b03841660009081526004602052604081209190915560038054849290610f949084906114a8565b90915550610fa3905083610bee565b826001600160a01b03167f9e71bc8eea02a63969f509818f2dafb9254532904319f9dbda79b67bd34a5f3d836040516106fc91815260200190565b6040516001600160a01b03808516602483015283166044820152606481018290526110169085906323b872dd60e01b90608401610bb7565b50505050565b6000611071826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166110ee9092919063ffffffff16565b805190915015610b86578080602001905181019061108f91906114c0565b610b865760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b606482015260840161034a565b60606110fd8484600085611107565b90505b9392505050565b6060824710156111685760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b606482015260840161034a565b6001600160a01b0385163b6111bf5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015260640161034a565b600080866001600160a01b031685876040516111db919061150e565b60006040518083038185875af1925050503d8060008114611218576040519150601f19603f3d011682016040523d82523d6000602084013e61121d565b606091505b509150915061122d828286611238565b979650505050505050565b60608315611247575081611100565b8251156112575782518084602001fd5b8160405162461bcd60e51b815260040161034a919061152a565b80356001600160a01b038116811461128857600080fd5b919050565b600080604083850312156112a057600080fd5b6112a983611271565b91506112b760208401611271565b90509250929050565b6000602082840312156112d257600080fd5b5035919050565b6000602082840312156112eb57600080fd5b813561ffff8116811461110057600080fd5b60006020828403121561130f57600080fd5b61110082611271565b60008060006060848603121561132d57600080fd5b61133684611271565b925061134460208501611271565b915061135260408501611271565b90509250925092565b6000806000806060858703121561137157600080fd5b61137a85611271565b935060208501359250604085013567ffffffffffffffff8082111561139e57600080fd5b818701915087601f8301126113b257600080fd5b8135818111156113c157600080fd5b8860208285010111156113d357600080fd5b95989497505060200194505050565b6020808252601f908201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604082015260600190565b634e487b7160e01b600052601160045260246000fd5b600061ffff80831681810361144657611446611419565b6001019392505050565b60008282101561146257611462611419565b500390565b600061ffff8381169083168181101561148257611482611419565b039392505050565b600061ffff82168061149e5761149e611419565b6000190192915050565b600082198211156114bb576114bb611419565b500190565b6000602082840312156114d257600080fd5b8151801515811461110057600080fd5b60005b838110156114fd5781810151838201526020016114e5565b838111156110165750506000910152565b600082516115208184602087016114e2565b9190910192915050565b60208152600082518060208401526115498160408501602087016114e2565b601f01601f1916919091016040019291505056fea2646970667358221220d5de2588ef5d345631669aa762125547a18e5b8343f8d669287651a30b8d137164736f6c634300080f0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061012c5760003560e01c8063715018a6116100ad578063a4c0ed3611610071578063a4c0ed3614610293578063a694fc3a146102a6578063e9fad8ee146102b9578063ef2149ba146102c1578063f2fde38b146102ea57600080fd5b8063715018a61461024b57806372f702f314610253578063817b1cd2146102665780638da5cb5b1461026f5780639c4239501461028057600080fd5b8063372d9448116100f4578063372d9448146101d6578063396876bd146101ff57806345114ee5146102075780634b48599d1461020f57806370a082311461022257600080fd5b806314706f3e1461013157806318160ddd146101575780631b0875a61461015f5780632e1a7d4d146101805780633203ea8f14610195575b600080fd5b61014461013f36600461128d565b6102fd565b6040519081526020015b60405180910390f35b600354610144565b60055461016d9061ffff1681565b60405161ffff909116815260200161014e565b61019361018e3660046112c0565b610328565b005b6101be6101a33660046112d9565b6006602052600090815260409020546001600160a01b031681565b6040516001600160a01b03909116815260200161014e565b6101be6101e43660046112fd565b6007602052600090815260409020546001600160a01b031681565b6101936104a7565b610193610509565b61019361021d366004611318565b6105b1565b6101446102303660046112fd565b6001600160a01b031660009081526004602052604090205490565b610193610709565b6002546101be906001600160a01b031681565b61014460035481565b6001546001600160a01b03166101be565b61019361028e3660046112d9565b61071d565b6101936102a136600461135b565b6108e0565b6101936102b43660046112c0565b610976565b6101936109c7565b6101be6102cf3660046112fd565b6008602052600090815260409020546001600160a01b031681565b6101936102f83660046112fd565b6109e8565b6001600160a01b03918216600090815260096020908152604080832093909416825291909152205490565b6002600054036103535760405162461bcd60e51b815260040161034a906113e2565b60405180910390fd5b6002600090815533905b60055461ffff90811690821610156104025761ffff81166000908152600660209081526040808320546001600160a01b03908116845260079092529182902054915163632447c960e01b8152848216600482015291169063632447c990602401600060405180830381600087803b1580156103d757600080fd5b505af11580156103eb573d6000803e3d6000fd5b5050505080806103fa9061142f565b91505061035d565b503360009081526004602052604090205461041e908390611450565b3360009081526004602052604081209190915560038054849290610443908490611450565b90915550610452905033610a61565b600254610469906001600160a01b03163384610b8b565b60405182815233907f7084f5476618d8e60b11ef0d7d3f06914655adb8793e28ff7f018d4c76d505d59060200160405180910390a250506001600055565b6002600054036104c95760405162461bcd60e51b815260040161034a906113e2565b60026000556104d733610bee565b60405133907fbf0116af1f8ddd1320e0d5708a1f7bd67f71d8c96d369b4084ba1b91ab7f7b1890600090a26001600055565b60026000540361052b5760405162461bcd60e51b815260040161034a906113e2565b600260009081555b60055461ffff908116908216101561057e5761ffff811660009081526006602052604090205461056c906001600160a01b031633610d13565b806105768161142f565b915050610533565b5060405133907fd5e5e23ba670ad7ae775ba2dd622861c8f5e59940127ddb42d0ada3bdfe8881990600090a26001600055565b6105b9610dec565b6001600160a01b0383811660009081526007602052604090205416156106215760405162461bcd60e51b815260206004820152601b60248201527f52657761726420746f6b656e20616c7265616479206578697374730000000000604482015260640161034a565b6005805461ffff908116600090815260066020908152604080832080546001600160a01b03199081166001600160a01b038b8116918217909355855260088452828520805482168a841617905560079093529083208054909216908616179055825490911691906106918361142f565b91906101000a81548161ffff021916908361ffff16021790555050826001600160a01b03167fdc569ae656a2a291bea4cbb0b556071ffff75a5aff570f9d300a176344bde53a83836040516106fc9291906001600160a01b0392831681529116602082015260400190565b60405180910390a2505050565b610711610dec565b61071b6000610e46565b565b610725610dec565b60055461ffff9081169082161061077e5760405162461bcd60e51b815260206004820152601b60248201527f52657761726420746f6b656e20646f6573206e6f742065786973740000000000604482015260640161034a565b61ffff8082166000908152600660205260409020546005546001600160a01b039091169160019116111561080b576005546006906000906107c59060019061ffff16611467565b61ffff9081168252602080830193909352604091820160009081205491861681526006909352912080546001600160a01b0319166001600160a01b039092169190911790555b6005546006906000906108249060019061ffff16611467565b61ffff90811682526020808301939093526040918201600090812080546001600160a01b03199081169091556001600160a01b0386168252600885528382208054821690556007909452918220805490931690925560058054909216919061088b8361148a565b91906101000a81548161ffff021916908361ffff16021790555050806001600160a01b03167f66257bcef574219c04f7c05f7a1c78d599da10491294c92a5805c48b4cdf500960405160405180910390a25050565b6002600054036109025760405162461bcd60e51b815260040161034a906113e2565b60026000819055546001600160a01b031633146109615760405162461bcd60e51b815260206004820152601c60248201527f53656e646572206d757374206265207374616b696e6720746f6b656e00000000604482015260640161034a565b61096b8484610e98565b505060016000555050565b6002600054036109985760405162461bcd60e51b815260040161034a906113e2565b60026000819055546109b5906001600160a01b0316333084610fde565b6109bf3382610e98565b506001600055565b336000908152600460205260409020546109e090610328565b61071b610509565b6109f0610dec565b6001600160a01b038116610a555760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b606482015260840161034a565b610a5e81610e46565b50565b6001600160a01b038116600090815260046020526040812054905b60055461ffff9081169082161015610b865761ffff81166000908152600660209081526040808320546001600160a01b03908116845260089092528220541690610ac682866102fd565b905083811115610b71576001600160a01b038216630d99bd6c86610aea8785611450565b6040516001600160e01b031960e085901b1681526001600160a01b0390921660048301526024820152604401600060405180830381600087803b158015610b3057600080fd5b505af1158015610b44573d6000803e3d6000fd5b5050506001600160a01b038084166000908152600960209081526040808320938a16835292905220859055505b50508080610b7e9061142f565b915050610a7c565b505050565b6040516001600160a01b038316602482015260448101829052610b8690849063a9059cbb60e01b906064015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b03199093169290921790915261101c565b6001600160a01b038116600090815260046020526040812054905b60055461ffff9081169082161015610b865761ffff81166000908152600660209081526040808320546001600160a01b03908116845260089092528220541690610c5382866102fd565b905083811015610cfe576001600160a01b0382166308641c8686610c778488611450565b6040516001600160e01b031960e085901b1681526001600160a01b0390921660048301526024820152604401600060405180830381600087803b158015610cbd57600080fd5b505af1158015610cd1573d6000803e3d6000fd5b5050506001600160a01b038084166000908152600960209081526040808320938a16835292905220859055505b50508080610d0b9061142f565b915050610c09565b6001600160a01b0382811660009081526007602052604090205416610d7a5760405162461bcd60e51b815260206004820152601b60248201527f52657761726420746f6b656e20646f6573206e6f742065786973740000000000604482015260640161034a565b6001600160a01b03828116600090815260076020526040908190205490516351cff8d960e01b815283831660048201529116906351cff8d990602401600060405180830381600087803b158015610dd057600080fd5b505af1158015610de4573d6000803e3d6000fd5b505050505050565b6001546001600160a01b0316331461071b5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161034a565b600180546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b8160005b60055461ffff9081169082161015610f415761ffff81166000908152600660209081526040808320546001600160a01b03908116845260079092529182902054915163632447c960e01b8152848216600482015291169063632447c990602401600060405180830381600087803b158015610f1657600080fd5b505af1158015610f2a573d6000803e3d6000fd5b505050508080610f399061142f565b915050610e9c565b506001600160a01b038316600090815260046020526040902054610f669083906114a8565b6001600160a01b03841660009081526004602052604081209190915560038054849290610f949084906114a8565b90915550610fa3905083610bee565b826001600160a01b03167f9e71bc8eea02a63969f509818f2dafb9254532904319f9dbda79b67bd34a5f3d836040516106fc91815260200190565b6040516001600160a01b03808516602483015283166044820152606481018290526110169085906323b872dd60e01b90608401610bb7565b50505050565b6000611071826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166110ee9092919063ffffffff16565b805190915015610b86578080602001905181019061108f91906114c0565b610b865760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b606482015260840161034a565b60606110fd8484600085611107565b90505b9392505050565b6060824710156111685760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b606482015260840161034a565b6001600160a01b0385163b6111bf5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015260640161034a565b600080866001600160a01b031685876040516111db919061150e565b60006040518083038185875af1925050503d8060008114611218576040519150601f19603f3d011682016040523d82523d6000602084013e61121d565b606091505b509150915061122d828286611238565b979650505050505050565b60608315611247575081611100565b8251156112575782518084602001fd5b8160405162461bcd60e51b815260040161034a919061152a565b80356001600160a01b038116811461128857600080fd5b919050565b600080604083850312156112a057600080fd5b6112a983611271565b91506112b760208401611271565b90509250929050565b6000602082840312156112d257600080fd5b5035919050565b6000602082840312156112eb57600080fd5b813561ffff8116811461110057600080fd5b60006020828403121561130f57600080fd5b61110082611271565b60008060006060848603121561132d57600080fd5b61133684611271565b925061134460208501611271565b915061135260408501611271565b90509250925092565b6000806000806060858703121561137157600080fd5b61137a85611271565b935060208501359250604085013567ffffffffffffffff8082111561139e57600080fd5b818701915087601f8301126113b257600080fd5b8135818111156113c157600080fd5b8860208285010111156113d357600080fd5b95989497505060200194505050565b6020808252601f908201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604082015260600190565b634e487b7160e01b600052601160045260246000fd5b600061ffff80831681810361144657611446611419565b6001019392505050565b60008282101561146257611462611419565b500390565b600061ffff8381169083168181101561148257611482611419565b039392505050565b600061ffff82168061149e5761149e611419565b6000190192915050565b600082198211156114bb576114bb611419565b500190565b6000602082840312156114d257600080fd5b8151801515811461110057600080fd5b60005b838110156114fd5781810151838201526020016114e5565b838111156110165750506000910152565b600082516115208184602087016114e2565b9190910192915050565b60208152600082518060208401526115498160408501602087016114e2565b601f01601f1916919091016040019291505056fea2646970667358221220d5de2588ef5d345631669aa762125547a18e5b8343f8d669287651a30b8d137164736f6c634300080f0033",
  "devdoc": {
    "details": "Handles owners token staking, allowance token distribution, & owners rewards assets",
    "kind": "dev",
    "methods": {
      "addRewardToken(address,address,address)": {
        "details": "adds a new asset",
        "params": {
          "_allowanceToken": "asset pool allowance token to add",
          "_rewardPool": "asset reward pool to add*",
          "_token": "asset to add"
        }
      },
      "balanceOf(address)": {
        "details": "returns a user's staked balance",
        "params": {
          "_account": "user to return balance for"
        },
        "returns": {
          "_0": "user's staked balance*"
        }
      },
      "exit()": {
        "details": "withdraws users earned rewards for all assets and withdraws their owners tokens*"
      },
      "mintAllowance()": {
        "details": "mints a user's unclaimed allowance tokens (used if a new asset is added after a user has already staked)*"
      },
      "mintedAllowance(address,address)": {
        "details": "returns how many allowance tokens have been minted for a user",
        "params": {
          "_account": "user to return minted amount for",
          "_allowanceToken": "allowance token to return minted amount for"
        },
        "returns": {
          "_0": "total allowance tokens a user has minted*"
        }
      },
      "onTokenTransfer(address,uint256,bytes)": {
        "details": "ERC677 implementation that proxies staking",
        "params": {
          "_sender": "of the token transfer",
          "_value": "of the token transfer*"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "removeRewardToken(uint16)": {
        "details": "removes an existing asset",
        "params": {
          "_index": "index of asset to remove*"
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "stake(uint256)": {
        "details": "stakes owners tokens & mints staking allowance tokens in return",
        "params": {
          "_amount": "amount to stake*"
        }
      },
      "totalSupply()": {
        "details": "returns total amount staked",
        "returns": {
          "_0": "total amount staked*"
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "withdraw(uint256)": {
        "details": "burns staking allowance tokens and withdraws staked owners tokens",
        "params": {
          "_amount": "amount to withdraw*"
        }
      },
      "withdrawAllRewards()": {
        "details": "withdraws user's earned rewards for a all assets*"
      }
    },
    "title": "Pool Owners",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 4310,
        "contract": "contracts/core/test/v1/PoolOwnersV1.sol:PoolOwnersV1",
        "label": "_status",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 3767,
        "contract": "contracts/core/test/v1/PoolOwnersV1.sol:PoolOwnersV1",
        "label": "_owner",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 21664,
        "contract": "contracts/core/test/v1/PoolOwnersV1.sol:PoolOwnersV1",
        "label": "stakingToken",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(IERC677)19646"
      },
      {
        "astId": 21666,
        "contract": "contracts/core/test/v1/PoolOwnersV1.sol:PoolOwnersV1",
        "label": "totalStaked",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 21670,
        "contract": "contracts/core/test/v1/PoolOwnersV1.sol:PoolOwnersV1",
        "label": "stakedBalances",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 21672,
        "contract": "contracts/core/test/v1/PoolOwnersV1.sol:PoolOwnersV1",
        "label": "totalRewardTokens",
        "offset": 0,
        "slot": "5",
        "type": "t_uint16"
      },
      {
        "astId": 21676,
        "contract": "contracts/core/test/v1/PoolOwnersV1.sol:PoolOwnersV1",
        "label": "rewardTokens",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_uint16,t_address)"
      },
      {
        "astId": 21680,
        "contract": "contracts/core/test/v1/PoolOwnersV1.sol:PoolOwnersV1",
        "label": "rewardPools",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_address,t_address)"
      },
      {
        "astId": 21684,
        "contract": "contracts/core/test/v1/PoolOwnersV1.sol:PoolOwnersV1",
        "label": "allowanceTokens",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_address,t_address)"
      },
      {
        "astId": 21690,
        "contract": "contracts/core/test/v1/PoolOwnersV1.sol:PoolOwnersV1",
        "label": "mintedAllowanceTokens",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_contract(IERC677)19646": {
        "encoding": "inplace",
        "label": "contract IERC677",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_address)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint16,t_address)": {
        "encoding": "mapping",
        "key": "t_uint16",
        "label": "mapping(uint16 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_uint16": {
        "encoding": "inplace",
        "label": "uint16",
        "numberOfBytes": "2"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}