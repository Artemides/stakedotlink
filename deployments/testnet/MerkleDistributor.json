{
  "address": "0x7532ef35CE22b2D3A453E988F4458EA7c20f38AB",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Claimed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenIndex",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "totalAmount",
          "type": "uint256"
        }
      ],
      "name": "DistributionAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "additionalAmount",
          "type": "uint256"
        }
      ],
      "name": "DistributionUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "TIME_LIMIT",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "_merkleRoot",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "_totalAmount",
          "type": "uint256"
        }
      ],
      "name": "addDistribution",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_tokens",
          "type": "address[]"
        },
        {
          "internalType": "bytes32[]",
          "name": "_merkleRoots",
          "type": "bytes32[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_totalAmounts",
          "type": "uint256[]"
        }
      ],
      "name": "addDistributions",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_index",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "bytes32[]",
          "name": "_merkleProof",
          "type": "bytes32[]"
        }
      ],
      "name": "claimDistribution",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_tokens",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_indexes",
          "type": "uint256[]"
        },
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "_amounts",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes32[][]",
          "name": "_merkleProofs",
          "type": "bytes32[][]"
        }
      ],
      "name": "claimDistributions",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "distributions",
      "outputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "timeLimitEnabled",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "isPaused",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "timeOfLastUpdate",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "merkleRoot",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "totalAmount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        }
      ],
      "name": "getClaimed",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        }
      ],
      "name": "pauseForWithdrawal",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "_enabled",
          "type": "bool"
        }
      ],
      "name": "setTimeLimitEnabled",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "tokens",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "_merkleRoot",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "_additionalAmount",
          "type": "uint256"
        }
      ],
      "name": "updateDistribution",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_tokens",
          "type": "address[]"
        },
        {
          "internalType": "bytes32[]",
          "name": "_merkleRoots",
          "type": "bytes32[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_additionalAmounts",
          "type": "uint256[]"
        }
      ],
      "name": "updateDistributions",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "_merkleRoot",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "_totalAmount",
          "type": "uint256"
        }
      ],
      "name": "withdrawUnclaimedTokens",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x9933864283ca98b63ba2625a56ccf733f754fcd0f4c20a11c02651496d59a454",
  "receipt": {
    "to": null,
    "from": "0x11187eff852069a33d102476b2E8A9cc9167dAde",
    "contractAddress": "0x7532ef35CE22b2D3A453E988F4458EA7c20f38AB",
    "transactionIndex": 0,
    "gasUsed": "1461676",
    "logsBloom": "0x
    "blockHash": "0xe6881f4052b6ebe2aaba6bf747b8c914f18861e0c75d8efe0e63fd6d8ca360c6",
    "transactionHash": "0x9933864283ca98b63ba2625a56ccf733f754fcd0f4c20a11c02651496d59a454",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 903229,
        "transactionHash": "0x9933864283ca98b63ba2625a56ccf733f754fcd0f4c20a11c02651496d59a454",
        "address": "0x7532ef35CE22b2D3A453E988F4458EA7c20f38AB",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x00000000000000000000000011187eff852069a33d102476b2e8a9cc9167dade"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0xe6881f4052b6ebe2aaba6bf747b8c914f18861e0c75d8efe0e63fd6d8ca360c6"
      }
    ],
    "blockNumber": 903229,
    "cumulativeGasUsed": "1461676",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "3b2625e8211dd6eaac71f4a881384a88",
  "metadata": "{\"compiler\":{\"version\":\"0.8.15+commit.e14f2714\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Claimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenIndex\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalAmount\",\"type\":\"uint256\"}],\"name\":\"DistributionAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"additionalAmount\",\"type\":\"uint256\"}],\"name\":\"DistributionUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"TIME_LIMIT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_merkleRoot\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_totalAmount\",\"type\":\"uint256\"}],\"name\":\"addDistribution\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_tokens\",\"type\":\"address[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"_merkleRoots\",\"type\":\"bytes32[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_totalAmounts\",\"type\":\"uint256[]\"}],\"name\":\"addDistributions\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes32[]\",\"name\":\"_merkleProof\",\"type\":\"bytes32[]\"}],\"name\":\"claimDistribution\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_indexes\",\"type\":\"uint256[]\"},{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"_amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes32[][]\",\"name\":\"_merkleProofs\",\"type\":\"bytes32[][]\"}],\"name\":\"claimDistributions\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"distributions\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"timeLimitEnabled\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isPaused\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"timeOfLastUpdate\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"merkleRoot\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"totalAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"getClaimed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"pauseForWithdrawal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_enabled\",\"type\":\"bool\"}],\"name\":\"setTimeLimitEnabled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokens\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_merkleRoot\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_additionalAmount\",\"type\":\"uint256\"}],\"name\":\"updateDistribution\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_tokens\",\"type\":\"address[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"_merkleRoots\",\"type\":\"bytes32[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_additionalAmounts\",\"type\":\"uint256[]\"}],\"name\":\"updateDistributions\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_merkleRoot\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_totalAmount\",\"type\":\"uint256\"}],\"name\":\"withdrawUnclaimedTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Based on https://github.com/Uniswap/merkle-distributor but modified to handle multiple airdrops concurrently\",\"kind\":\"dev\",\"methods\":{\"addDistribution(address,bytes32,uint256)\":{\"params\":{\"_merkleRoot\":\"merkle root for token distribution\",\"_token\":\"token address\",\"_totalAmount\":\"total distribution amount*\"}},\"addDistributions(address[],bytes32[],uint256[])\":{\"params\":{\"_merkleRoots\":\"list of merkle roots for each distribution\",\"_tokens\":\"the list of token addresses to add\",\"_totalAmounts\":\"list of total distribution amounts for each token*\"}},\"claimDistribution(address,uint256,address,uint256,bytes32[])\":{\"params\":{\"_account\":\"address of the account to claim for\",\"_amount\":\"lifetime amount of the token allocated to account\",\"_index\":\"index of the claim within the distribution\",\"_merkleProof\":\"the merkle proof for the token claim*\",\"_token\":\"token address\"}},\"claimDistributions(address[],uint256[],address,uint256[],bytes32[][])\":{\"params\":{\"_account\":\"address of the account to claim for\",\"_amounts\":\"list of lifetime amounts of the tokens allocated to account\",\"_indexes\":\"list of indexes of the claims within the distributions\",\"_merkleProofs\":\"list of merkle proofs for the token claims*\",\"_tokens\":\"list of token address\"}},\"getClaimed(address,address)\":{\"params\":{\"_account\":\"address of the account to return claimed amount for*\",\"_token\":\"token address\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"pauseForWithdrawal(address)\":{\"details\":\"must be called before withdrawUnlclaimedTokens to ensure state doesn't change while the new merkle root is calculated\",\"params\":{\"_token\":\"token address*\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"setTimeLimitEnabled(address,bool)\":{\"params\":{\"_enabled\":\"whether to enable or disable the limit*\",\"_token\":\"token addresse\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"updateDistribution(address,bytes32,uint256)\":{\"details\":\"merkle root should be updated to reflect additional amount - the amount for each account should be incremented by any additional allocation and any new accounts should be added to the tree\",\"params\":{\"_additionalAmount\":\"total additional distribution amount*\",\"_merkleRoot\":\"updated merkle root for token distribution\",\"_token\":\"token address\"}},\"updateDistributions(address[],bytes32[],uint256[])\":{\"params\":{\"_additionalAmounts\":\"list of total additional distribution amounts for each token*\",\"_merkleRoots\":\"list of updated merkle roots for the distributions\",\"_tokens\":\"the list of token addresses to update\"}},\"withdrawUnclaimedTokens(address,bytes32,uint256)\":{\"details\":\"merkle root should be updated to reflect current state of claims - the amount for each account should be equal to it's claimed amount\",\"params\":{\"_merkleRoot\":\"updated merkle root\",\"_token\":\"token address\",\"_totalAmount\":\"updated total amount*\"}}},\"title\":\"MerkleDistributor\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"addDistribution(address,bytes32,uint256)\":{\"notice\":\"add a token distribution\"},\"addDistributions(address[],bytes32[],uint256[])\":{\"notice\":\"add multiple token distributions\"},\"claimDistribution(address,uint256,address,uint256,bytes32[])\":{\"notice\":\"claim a token distribution\"},\"claimDistributions(address[],uint256[],address,uint256[],bytes32[][])\":{\"notice\":\"claim multiple token distributions\"},\"getClaimed(address,address)\":{\"notice\":\"returns the total amount that an account has claimed from a distribution\"},\"pauseForWithdrawal(address)\":{\"notice\":\"pauses a token distribution for withdrawal of unclaimed tokens\"},\"setTimeLimitEnabled(address,bool)\":{\"notice\":\"enables/disables the time limit for a token\"},\"updateDistribution(address,bytes32,uint256)\":{\"notice\":\"update a token distribution\"},\"updateDistributions(address[],bytes32[],uint256[])\":{\"notice\":\"update multiple token distributions\"},\"withdrawUnclaimedTokens(address,bytes32,uint256)\":{\"notice\":\"withdraws unclaimed tokens\"}},\"notice\":\"Handles token airdrops from an unlimited amount of token rewards\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/airdrop/MerkleDistributor.sol\":\"MerkleDistributor\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xf41ca991f30855bf80ffd11e9347856a517b977f0a6c2d52e6421a99b7840329\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/draft-IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x032807210d1d7d218963d7355d62e021a84bf1b3339f4f50be2f63b53cccaf29\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd6153ce99bcdcce22b124f755e72553295be6abcd63804cfdffceb188b8bef10\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/cryptography/MerkleProof.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev These functions deal with verification of Merkle Tree proofs.\\n *\\n * The proofs can be generated using the JavaScript library\\n * https://github.com/miguelmota/merkletreejs[merkletreejs].\\n * Note: the hashing algorithm should be keccak256 and pair sorting should be enabled.\\n *\\n * See `test/utils/cryptography/MerkleProof.test.js` for some examples.\\n *\\n * WARNING: You should avoid using leaf values that are 64 bytes long prior to\\n * hashing, or use a hash function other than keccak256 for hashing leaves.\\n * This is because the concatenation of a sorted pair of internal nodes in\\n * the merkle tree could be reinterpreted as a leaf value.\\n */\\nlibrary MerkleProof {\\n    /**\\n     * @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\\n     * defined by `root`. For this, a `proof` must be provided, containing\\n     * sibling hashes on the branch from the leaf to the root of the tree. Each\\n     * pair of leaves and each pair of pre-images are assumed to be sorted.\\n     */\\n    function verify(\\n        bytes32[] memory proof,\\n        bytes32 root,\\n        bytes32 leaf\\n    ) internal pure returns (bool) {\\n        return processProof(proof, leaf) == root;\\n    }\\n\\n    /**\\n     * @dev Calldata version of {verify}\\n     *\\n     * _Available since v4.7._\\n     */\\n    function verifyCalldata(\\n        bytes32[] calldata proof,\\n        bytes32 root,\\n        bytes32 leaf\\n    ) internal pure returns (bool) {\\n        return processProofCalldata(proof, leaf) == root;\\n    }\\n\\n    /**\\n     * @dev Returns the rebuilt hash obtained by traversing a Merkle tree up\\n     * from `leaf` using `proof`. A `proof` is valid if and only if the rebuilt\\n     * hash matches the root of the tree. When processing the proof, the pairs\\n     * of leafs & pre-images are assumed to be sorted.\\n     *\\n     * _Available since v4.4._\\n     */\\n    function processProof(bytes32[] memory proof, bytes32 leaf) internal pure returns (bytes32) {\\n        bytes32 computedHash = leaf;\\n        for (uint256 i = 0; i < proof.length; i++) {\\n            computedHash = _hashPair(computedHash, proof[i]);\\n        }\\n        return computedHash;\\n    }\\n\\n    /**\\n     * @dev Calldata version of {processProof}\\n     *\\n     * _Available since v4.7._\\n     */\\n    function processProofCalldata(bytes32[] calldata proof, bytes32 leaf) internal pure returns (bytes32) {\\n        bytes32 computedHash = leaf;\\n        for (uint256 i = 0; i < proof.length; i++) {\\n            computedHash = _hashPair(computedHash, proof[i]);\\n        }\\n        return computedHash;\\n    }\\n\\n    /**\\n     * @dev Returns true if the `leaves` can be proved to be a part of a Merkle tree defined by\\n     * `root`, according to `proof` and `proofFlags` as described in {processMultiProof}.\\n     *\\n     * _Available since v4.7._\\n     */\\n    function multiProofVerify(\\n        bytes32[] memory proof,\\n        bool[] memory proofFlags,\\n        bytes32 root,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bool) {\\n        return processMultiProof(proof, proofFlags, leaves) == root;\\n    }\\n\\n    /**\\n     * @dev Calldata version of {multiProofVerify}\\n     *\\n     * _Available since v4.7._\\n     */\\n    function multiProofVerifyCalldata(\\n        bytes32[] calldata proof,\\n        bool[] calldata proofFlags,\\n        bytes32 root,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bool) {\\n        return processMultiProofCalldata(proof, proofFlags, leaves) == root;\\n    }\\n\\n    /**\\n     * @dev Returns the root of a tree reconstructed from `leaves` and the sibling nodes in `proof`,\\n     * consuming from one or the other at each step according to the instructions given by\\n     * `proofFlags`.\\n     *\\n     * _Available since v4.7._\\n     */\\n    function processMultiProof(\\n        bytes32[] memory proof,\\n        bool[] memory proofFlags,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bytes32 merkleRoot) {\\n        // This function rebuild the root hash by traversing the tree up from the leaves. The root is rebuilt by\\n        // consuming and producing values on a queue. The queue starts with the `leaves` array, then goes onto the\\n        // `hashes` array. At the end of the process, the last hash in the `hashes` array should contain the root of\\n        // the merkle tree.\\n        uint256 leavesLen = leaves.length;\\n        uint256 totalHashes = proofFlags.length;\\n\\n        // Check proof validity.\\n        require(leavesLen + proof.length - 1 == totalHashes, \\\"MerkleProof: invalid multiproof\\\");\\n\\n        // The xxxPos values are \\\"pointers\\\" to the next value to consume in each array. All accesses are done using\\n        // `xxx[xxxPos++]`, which return the current value and increment the pointer, thus mimicking a queue's \\\"pop\\\".\\n        bytes32[] memory hashes = new bytes32[](totalHashes);\\n        uint256 leafPos = 0;\\n        uint256 hashPos = 0;\\n        uint256 proofPos = 0;\\n        // At each step, we compute the next hash using two values:\\n        // - a value from the \\\"main queue\\\". If not all leaves have been consumed, we get the next leaf, otherwise we\\n        //   get the next hash.\\n        // - depending on the flag, either another value for the \\\"main queue\\\" (merging branches) or an element from the\\n        //   `proof` array.\\n        for (uint256 i = 0; i < totalHashes; i++) {\\n            bytes32 a = leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++];\\n            bytes32 b = proofFlags[i] ? leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++] : proof[proofPos++];\\n            hashes[i] = _hashPair(a, b);\\n        }\\n\\n        if (totalHashes > 0) {\\n            return hashes[totalHashes - 1];\\n        } else if (leavesLen > 0) {\\n            return leaves[0];\\n        } else {\\n            return proof[0];\\n        }\\n    }\\n\\n    /**\\n     * @dev Calldata version of {processMultiProof}\\n     *\\n     * _Available since v4.7._\\n     */\\n    function processMultiProofCalldata(\\n        bytes32[] calldata proof,\\n        bool[] calldata proofFlags,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bytes32 merkleRoot) {\\n        // This function rebuild the root hash by traversing the tree up from the leaves. The root is rebuilt by\\n        // consuming and producing values on a queue. The queue starts with the `leaves` array, then goes onto the\\n        // `hashes` array. At the end of the process, the last hash in the `hashes` array should contain the root of\\n        // the merkle tree.\\n        uint256 leavesLen = leaves.length;\\n        uint256 totalHashes = proofFlags.length;\\n\\n        // Check proof validity.\\n        require(leavesLen + proof.length - 1 == totalHashes, \\\"MerkleProof: invalid multiproof\\\");\\n\\n        // The xxxPos values are \\\"pointers\\\" to the next value to consume in each array. All accesses are done using\\n        // `xxx[xxxPos++]`, which return the current value and increment the pointer, thus mimicking a queue's \\\"pop\\\".\\n        bytes32[] memory hashes = new bytes32[](totalHashes);\\n        uint256 leafPos = 0;\\n        uint256 hashPos = 0;\\n        uint256 proofPos = 0;\\n        // At each step, we compute the next hash using two values:\\n        // - a value from the \\\"main queue\\\". If not all leaves have been consumed, we get the next leaf, otherwise we\\n        //   get the next hash.\\n        // - depending on the flag, either another value for the \\\"main queue\\\" (merging branches) or an element from the\\n        //   `proof` array.\\n        for (uint256 i = 0; i < totalHashes; i++) {\\n            bytes32 a = leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++];\\n            bytes32 b = proofFlags[i] ? leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++] : proof[proofPos++];\\n            hashes[i] = _hashPair(a, b);\\n        }\\n\\n        if (totalHashes > 0) {\\n            return hashes[totalHashes - 1];\\n        } else if (leavesLen > 0) {\\n            return leaves[0];\\n        } else {\\n            return proof[0];\\n        }\\n    }\\n\\n    function _hashPair(bytes32 a, bytes32 b) private pure returns (bytes32) {\\n        return a < b ? _efficientHash(a, b) : _efficientHash(b, a);\\n    }\\n\\n    function _efficientHash(bytes32 a, bytes32 b) private pure returns (bytes32 value) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(0x00, a)\\n            mstore(0x20, b)\\n            value := keccak256(0x00, 0x40)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x596ed72a251d391b814a4aa19d7acb02ebdcc92ba27d3fff74a6f0c158b12ab7\",\"license\":\"MIT\"},\"contracts/airdrop/MerkleDistributor.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.15;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\n/**\\n * @title MerkleDistributor\\n * @notice Handles token airdrops from an unlimited amount of token rewards\\n * @dev Based on https://github.com/Uniswap/merkle-distributor but modified to handle multiple airdrops concurrently\\n */\\ncontract MerkleDistributor is Ownable {\\n    using SafeERC20 for IERC20;\\n\\n    uint public constant TIME_LIMIT = 90 days;\\n\\n    struct Distribution {\\n        address token;\\n        bool timeLimitEnabled;\\n        bool isPaused;\\n        uint timeOfLastUpdate;\\n        bytes32 merkleRoot;\\n        uint totalAmount;\\n        mapping(address => uint256) claimed;\\n    }\\n    address[] public tokens;\\n    mapping(address => Distribution) public distributions;\\n\\n    event Claimed(address indexed token, uint256 index, address indexed account, uint256 amount);\\n    event DistributionAdded(uint256 indexed tokenIndex, address indexed token, uint totalAmount);\\n    event DistributionUpdated(address indexed token, uint additionalAmount);\\n\\n    modifier distributionExists(address _token) {\\n        require(distributions[_token].token != address(0), \\\"MerkleDistributor: Distribution does not exist.\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @notice returns the total amount that an account has claimed from a distribution\\n     * @param _token token address\\n     * @param _account address of the account to return claimed amount for\\n     **/\\n    function getClaimed(address _token, address _account) external view distributionExists(_token) returns (uint) {\\n        return distributions[_token].claimed[_account];\\n    }\\n\\n    /**\\n     * @notice add multiple token distributions\\n     * @param _tokens the list of token addresses to add\\n     * @param _merkleRoots list of merkle roots for each distribution\\n     * @param _totalAmounts list of total distribution amounts for each token\\n     **/\\n    function addDistributions(\\n        address[] calldata _tokens,\\n        bytes32[] calldata _merkleRoots,\\n        uint[] calldata _totalAmounts\\n    ) external onlyOwner {\\n        require(\\n            _tokens.length == _merkleRoots.length && _tokens.length == _totalAmounts.length,\\n            \\\"MerkleDistributor: Array lengths need to match.\\\"\\n        );\\n\\n        for (uint i = 0; i < _tokens.length; i++) {\\n            addDistribution(_tokens[i], _merkleRoots[i], _totalAmounts[i]);\\n        }\\n    }\\n\\n    /**\\n     * @notice add a token distribution\\n     * @param _token token address\\n     * @param _merkleRoot merkle root for token distribution\\n     * @param _totalAmount total distribution amount\\n     **/\\n    function addDistribution(\\n        address _token,\\n        bytes32 _merkleRoot,\\n        uint _totalAmount\\n    ) public onlyOwner {\\n        require(distributions[_token].token == address(0), \\\"MerkleDistributor: Distribution is already added.\\\");\\n\\n        IERC20(_token).safeTransferFrom(msg.sender, address(this), _totalAmount);\\n        tokens.push(_token);\\n\\n        distributions[_token].token = _token;\\n        distributions[_token].merkleRoot = _merkleRoot;\\n        distributions[_token].totalAmount = _totalAmount;\\n        distributions[_token].timeOfLastUpdate = block.timestamp;\\n\\n        emit DistributionAdded(tokens.length - 1, _token, _totalAmount);\\n    }\\n\\n    /**\\n     * @notice update multiple token distributions\\n     * @param _tokens the list of token addresses to update\\n     * @param _merkleRoots list of updated merkle roots for the distributions\\n     * @param _additionalAmounts list of total additional distribution amounts for each token\\n     **/\\n    function updateDistributions(\\n        address[] calldata _tokens,\\n        bytes32[] calldata _merkleRoots,\\n        uint[] calldata _additionalAmounts\\n    ) external onlyOwner {\\n        require(\\n            _tokens.length == _merkleRoots.length && _tokens.length == _additionalAmounts.length,\\n            \\\"MerkleDistributor: Array lengths need to match.\\\"\\n        );\\n\\n        for (uint i = 0; i < _tokens.length; i++) {\\n            updateDistribution(_tokens[i], _merkleRoots[i], _additionalAmounts[i]);\\n        }\\n    }\\n\\n    /**\\n     * @notice update a token distribution\\n     * @dev merkle root should be updated to reflect additional amount - the amount for each\\n     * account should be incremented by any additional allocation and any new accounts should be added\\n     * to the tree\\n     * @param _token token address\\n     * @param _merkleRoot updated merkle root for token distribution\\n     * @param _additionalAmount total additional distribution amount\\n     **/\\n    function updateDistribution(\\n        address _token,\\n        bytes32 _merkleRoot,\\n        uint _additionalAmount\\n    ) public onlyOwner distributionExists(_token) {\\n        IERC20(_token).safeTransferFrom(msg.sender, address(this), _additionalAmount);\\n\\n        distributions[_token].merkleRoot = _merkleRoot;\\n        distributions[_token].totalAmount += _additionalAmount;\\n        distributions[_token].timeOfLastUpdate = block.timestamp;\\n\\n        emit DistributionUpdated(_token, _additionalAmount);\\n    }\\n\\n    /**\\n     * @notice claim multiple token distributions\\n     * @param _tokens list of token address\\n     * @param _indexes list of indexes of the claims within the distributions\\n     * @param _account address of the account to claim for\\n     * @param _amounts list of lifetime amounts of the tokens allocated to account\\n     * @param _merkleProofs list of merkle proofs for the token claims\\n     **/\\n    function claimDistributions(\\n        address[] calldata _tokens,\\n        uint256[] calldata _indexes,\\n        address _account,\\n        uint256[] calldata _amounts,\\n        bytes32[][] calldata _merkleProofs\\n    ) external {\\n        require(\\n            _tokens.length == _indexes.length && _tokens.length == _amounts.length && _tokens.length == _merkleProofs.length,\\n            \\\"MerkleDistributor: Array lengths need to match.\\\"\\n        );\\n\\n        for (uint i = 0; i < _tokens.length; i++) {\\n            claimDistribution(_tokens[i], _indexes[i], _account, _amounts[i], _merkleProofs[i]);\\n        }\\n    }\\n\\n    /**\\n     * @notice claim a token distribution\\n     * @param _token token address\\n     * @param _index index of the claim within the distribution\\n     * @param _account address of the account to claim for\\n     * @param _amount lifetime amount of the token allocated to account\\n     * @param _merkleProof the merkle proof for the token claim\\n     **/\\n    function claimDistribution(\\n        address _token,\\n        uint256 _index,\\n        address _account,\\n        uint256 _amount,\\n        bytes32[] calldata _merkleProof\\n    ) public distributionExists(_token) {\\n        require(!distributions[_token].isPaused, \\\"MerkleDistributor: Distribution is paused.\\\");\\n        Distribution storage distribution = distributions[_token];\\n\\n        bytes32 node = keccak256(abi.encodePacked(_index, _account, _amount));\\n        require(MerkleProof.verify(_merkleProof, distribution.merkleRoot, node), \\\"MerkleDistributor: Invalid proof.\\\");\\n\\n        require(distribution.claimed[_account] < _amount, \\\"MerkleDistributor: No claimable tokens.\\\");\\n\\n        uint amount = _amount - distribution.claimed[_account];\\n        distribution.claimed[_account] = _amount;\\n        IERC20(_token).safeTransfer(_account, amount);\\n\\n        emit Claimed(_token, _index, _account, amount);\\n    }\\n\\n    /**\\n     * @notice withdraws unclaimed tokens\\n     * @dev merkle root should be updated to reflect current state of claims - the amount for each\\n     * account should be equal to it's claimed amount\\n     * @param _token token address\\n     * @param _merkleRoot updated merkle root\\n     * @param _totalAmount updated total amount\\n     **/\\n    function withdrawUnclaimedTokens(\\n        address _token,\\n        bytes32 _merkleRoot,\\n        uint _totalAmount\\n    ) external onlyOwner distributionExists(_token) {\\n        require(distributions[_token].isPaused, \\\"MerkleDistributor: Distribution is not paused.\\\");\\n\\n        IERC20 token = IERC20(_token);\\n        uint balance = token.balanceOf(address(this));\\n        if (balance > 0) {\\n            token.safeTransfer(msg.sender, balance);\\n        }\\n\\n        distributions[_token].merkleRoot = _merkleRoot;\\n        distributions[_token].totalAmount = _totalAmount;\\n        distributions[_token].isPaused = false;\\n    }\\n\\n    /**\\n     * @notice pauses a token distribution for withdrawal of unclaimed tokens\\n     * @dev must be called before withdrawUnlclaimedTokens to ensure state doesn't change\\n     * while the new merkle root is calculated\\n     * @param _token token address\\n     **/\\n    function pauseForWithdrawal(address _token) external onlyOwner distributionExists(_token) {\\n        require(distributions[_token].timeLimitEnabled, \\\"MerkleDistributor: Time limit is not enabled.\\\");\\n        require(\\n            block.timestamp > distributions[_token].timeOfLastUpdate + TIME_LIMIT,\\n            \\\"MerkleDistributor: Time limit has not been reached.\\\"\\n        );\\n\\n        distributions[_token].isPaused = true;\\n    }\\n\\n    /**\\n     * @notice enables/disables the time limit for a token\\n     * @param _token token addresse\\n     * @param _enabled whether to enable or disable the limit\\n     **/\\n    function setTimeLimitEnabled(address _token, bool _enabled) external onlyOwner distributionExists(_token) {\\n        require(distributions[_token].timeLimitEnabled != _enabled, \\\"MerkleDistributor: Value already set.\\\");\\n        distributions[_token].timeLimitEnabled = _enabled;\\n        if (_enabled) {\\n            distributions[_token].timeOfLastUpdate = block.timestamp;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x4f3b8faa916662d8b3c460ea04a521b61ab8de5b55ca3ba088d749f4fa205e53\",\"license\":\"UNLICENSED\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5061001a3361001f565b61006f565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6119048061007e6000396000f3fe608060405234801561001057600080fd5b50600436106101005760003560e01c80639353b9df11610097578063bb245b0c11610066578063bb245b0c14610280578063cbfced2f14610293578063ccf362c8146102a6578063f2fde38b146102b957600080fd5b80639353b9df146101b4578063a429f1cb14610247578063a82613701461025a578063b224f6991461026d57600080fd5b8063698224ae116100d3578063698224ae14610170578063715018a6146101885780638da5cb5b14610190578063902bb5a1146101a157600080fd5b80630cd81f5b146101055780632f264d641461011a5780634f64b2be1461012d57806363c6a5e41461015d575b600080fd5b6101186101133660046113fa565b6102cc565b005b610118610128366004611480565b6105a6565b61014061013b3660046114b7565b6106c8565b6040516001600160a01b0390911681526020015b60405180910390f35b61011861016b3660046114d0565b6106f2565b61017a6276a70081565b604051908152602001610154565b610118610877565b6000546001600160a01b0316610140565b6101186101af3660046114eb565b61088b565b61020a6101c23660046114d0565b600260208190526000918252604090912080546001820154928201546003909201546001600160a01b0382169360ff600160a01b8404811694600160a81b9094041692909186565b604080516001600160a01b0390971687529415156020870152921515938501939093526060840152608083019190915260a082015260c001610154565b61011861025536600461151e565b610978565b6101186102683660046115a6565b610a31565b61011861027b3660046114eb565b610b10565b61011861028e36600461151e565b610c55565b6101186102a13660046114eb565b610d05565b61017a6102b4366004611680565b610e7e565b6101186102c73660046114d0565b610eea565b6001600160a01b0380871660009081526002602052604090205487911661030e5760405162461bcd60e51b8152600401610305906116b3565b60405180910390fd5b6001600160a01b038716600090815260026020526040902054600160a81b900460ff161561037f5760405162461bcd60e51b815260206004820152602a60248201526000805160206118af83398151915260448201526934b9903830bab9b2b21760b11b6064820152608401610305565b6001600160a01b038716600090815260026020908152604080832081519283018a90526bffffffffffffffffffffffff1960608a901b1691830191909152605482018790529190607401604051602081830303815290604052805190602001209050610422858580806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250505050600284015483610f63565b6104785760405162461bcd60e51b815260206004820152602160248201527f4d65726b6c654469737472696275746f723a20496e76616c69642070726f6f666044820152601760f91b6064820152608401610305565b6001600160a01b038716600090815260048301602052604090205486116104f15760405162461bcd60e51b815260206004820152602760248201527f4d65726b6c654469737472696275746f723a204e6f20636c61696d61626c65206044820152663a37b5b2b7399760c91b6064820152608401610305565b6001600160a01b03871660009081526004830160205260408120546105169088611706565b6001600160a01b03808a1660009081526004860160205260409020899055909150610544908b168983610f7b565b876001600160a01b03168a6001600160a01b03167f8dab6d35466ca3cba614bc5b262979b277949786977e81107f375f7e39f7734a8b84604051610592929190918252602082015260400190565b60405180910390a350505050505050505050565b6105ae610fde565b6001600160a01b038083166000908152600260205260409020548391166105e75760405162461bcd60e51b8152600401610305906116b3565b6001600160a01b038316600090815260026020526040902054821515600160a01b90910460ff1615150361066b5760405162461bcd60e51b815260206004820152602560248201527f4d65726b6c654469737472696275746f723a2056616c756520616c72656164796044820152641039b2ba1760d91b6064820152608401610305565b6001600160a01b0383166000908152600260205260409020805483158015600160a01b0260ff60a01b19909216919091179091556106c3576001600160a01b0383166000908152600260205260409020426001909101555b505050565b600181815481106106d857600080fd5b6000918252602090912001546001600160a01b0316905081565b6106fa610fde565b6001600160a01b038082166000908152600260205260409020548291166107335760405162461bcd60e51b8152600401610305906116b3565b6001600160a01b038216600090815260026020526040902054600160a01b900460ff166107b85760405162461bcd60e51b815260206004820152602d60248201527f4d65726b6c654469737472696275746f723a2054696d65206c696d697420697360448201526c103737ba1032b730b13632b21760991b6064820152608401610305565b6001600160a01b0382166000908152600260205260409020600101546107e2906276a7009061171d565b421161084c5760405162461bcd60e51b815260206004820152603360248201527f4d65726b6c654469737472696275746f723a2054696d65206c696d697420686160448201527239903737ba103132b2b7103932b0b1b432b21760691b6064820152608401610305565b506001600160a01b03166000908152600260205260409020805460ff60a81b1916600160a81b179055565b61087f610fde565b6108896000611038565b565b610893610fde565b6001600160a01b038084166000908152600260205260409020548491166108cc5760405162461bcd60e51b8152600401610305906116b3565b6108e16001600160a01b038516333085611088565b6001600160a01b03841660009081526002602081905260408220908101859055600301805484929061091490849061171d565b90915550506001600160a01b0384166000818152600260205260409081902042600190910155517f46749f2362413a5f0f53f7f11249e02052d810c56ead7bea2544c4a93a0828ee9061096a9085815260200190565b60405180910390a250505050565b610980610fde565b848314801561098e57508481145b6109aa5760405162461bcd60e51b815260040161030590611735565b60005b85811015610a2857610a168787838181106109ca576109ca611784565b90506020020160208101906109df91906114d0565b8686848181106109f1576109f1611784565b90506020020135858585818110610a0a57610a0a611784565b90506020020135610b10565b80610a208161179a565b9150506109ad565b50505050505050565b8786148015610a3f57508783145b8015610a4a57508781145b610a665760405162461bcd60e51b815260040161030590611735565b60005b88811015610b0457610af28a8a83818110610a8657610a86611784565b9050602002016020810190610a9b91906114d0565b898984818110610aad57610aad611784565b9050602002013588888886818110610ac757610ac7611784565b90506020020135878787818110610ae057610ae0611784565b905060200281019061011391906117b3565b80610afc8161179a565b915050610a69565b50505050505050505050565b610b18610fde565b6001600160a01b038381166000908152600260205260409020541615610b885760405162461bcd60e51b815260206004820152603160248201526000805160206118af83398151915260448201527034b99030b63932b0b23c9030b23232b21760791b6064820152608401610305565b610b9d6001600160a01b038416333084611088565b6001805480820182557fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf60180546001600160a01b0386166001600160a01b031991821681179092556000828152600260208190526040909120805490921683178255810185905560038101849055429083015581549091610c1d91611706565b6040518381527f7ee8a29714bdcaf6e579a4bf67cbc3ab1c50e0977c8f4021e61c48c1d2f217569060200160405180910390a3505050565b610c5d610fde565b8483148015610c6b57508481145b610c875760405162461bcd60e51b815260040161030590611735565b60005b85811015610a2857610cf3878783818110610ca757610ca7611784565b9050602002016020810190610cbc91906114d0565b868684818110610cce57610cce611784565b90506020020135858585818110610ce757610ce7611784565b9050602002013561088b565b80610cfd8161179a565b915050610c8a565b610d0d610fde565b6001600160a01b03808416600090815260026020526040902054849116610d465760405162461bcd60e51b8152600401610305906116b3565b6001600160a01b038416600090815260026020526040902054600160a81b900460ff16610dba5760405162461bcd60e51b815260206004820152602e60248201526000805160206118af83398151915260448201526d34b9903737ba103830bab9b2b21760911b6064820152608401610305565b6040516370a0823160e01b815230600482015284906000906001600160a01b038316906370a0823190602401602060405180830381865afa158015610e03573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e2791906117fd565b90508015610e4357610e436001600160a01b0383163383610f7b565b5050506001600160a01b039092166000908152600260208190526040909120908101919091556003810191909155805460ff60a81b19169055565b6001600160a01b038083166000908152600260205260408120549091849116610eb95760405162461bcd60e51b8152600401610305906116b3565b50506001600160a01b0391821660009081526002602090815260408083209390941682526004909201909152205490565b610ef2610fde565b6001600160a01b038116610f575760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610305565b610f6081611038565b50565b600082610f7085846110c6565b1490505b9392505050565b6040516001600160a01b0383166024820152604481018290526106c390849063a9059cbb60e01b906064015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152611113565b6000546001600160a01b031633146108895760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610305565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6040516001600160a01b03808516602483015283166044820152606481018290526110c09085906323b872dd60e01b90608401610fa7565b50505050565b600081815b845181101561110b576110f7828683815181106110ea576110ea611784565b60200260200101516111e5565b9150806111038161179a565b9150506110cb565b509392505050565b6000611168826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166112119092919063ffffffff16565b8051909150156106c357808060200190518101906111869190611816565b6106c35760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401610305565b6000818310611201576000828152602084905260409020610f74565b5060009182526020526040902090565b60606112208484600085611228565b949350505050565b6060824710156112895760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b6064820152608401610305565b6001600160a01b0385163b6112e05760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610305565b600080866001600160a01b031685876040516112fc919061185f565b60006040518083038185875af1925050503d8060008114611339576040519150601f19603f3d011682016040523d82523d6000602084013e61133e565b606091505b509150915061134e828286611359565b979650505050505050565b60608315611368575081610f74565b8251156113785782518084602001fd5b8160405162461bcd60e51b8152600401610305919061187b565b80356001600160a01b03811681146113a957600080fd5b919050565b60008083601f8401126113c057600080fd5b50813567ffffffffffffffff8111156113d857600080fd5b6020830191508360208260051b85010111156113f357600080fd5b9250929050565b60008060008060008060a0878903121561141357600080fd5b61141c87611392565b95506020870135945061143160408801611392565b935060608701359250608087013567ffffffffffffffff81111561145457600080fd5b61146089828a016113ae565b979a9699509497509295939492505050565b8015158114610f6057600080fd5b6000806040838503121561149357600080fd5b61149c83611392565b915060208301356114ac81611472565b809150509250929050565b6000602082840312156114c957600080fd5b5035919050565b6000602082840312156114e257600080fd5b610f7482611392565b60008060006060848603121561150057600080fd5b61150984611392565b95602085013595506040909401359392505050565b6000806000806000806060878903121561153757600080fd5b863567ffffffffffffffff8082111561154f57600080fd5b61155b8a838b016113ae565b9098509650602089013591508082111561157457600080fd5b6115808a838b016113ae565b9096509450604089013591508082111561159957600080fd5b5061146089828a016113ae565b600080600080600080600080600060a08a8c0312156115c457600080fd5b893567ffffffffffffffff808211156115dc57600080fd5b6115e88d838e016113ae565b909b50995060208c013591508082111561160157600080fd5b61160d8d838e016113ae565b909950975087915061162160408d01611392565b965060608c013591508082111561163757600080fd5b6116438d838e016113ae565b909650945060808c013591508082111561165c57600080fd5b506116698c828d016113ae565b915080935050809150509295985092959850929598565b6000806040838503121561169357600080fd5b61169c83611392565b91506116aa60208401611392565b90509250929050565b6020808252602f908201526000805160206118af83398151915260408201526e3237b2b9903737ba1032bc34b9ba1760891b606082015260800190565b634e487b7160e01b600052601160045260246000fd5b600082821015611718576117186116f0565b500390565b60008219821115611730576117306116f0565b500190565b6020808252602f908201527f4d65726b6c654469737472696275746f723a204172726179206c656e6774687360408201526e103732b2b2103a379036b0ba31b41760891b606082015260800190565b634e487b7160e01b600052603260045260246000fd5b6000600182016117ac576117ac6116f0565b5060010190565b6000808335601e198436030181126117ca57600080fd5b83018035915067ffffffffffffffff8211156117e557600080fd5b6020019150600581901b36038213156113f357600080fd5b60006020828403121561180f57600080fd5b5051919050565b60006020828403121561182857600080fd5b8151610f7481611472565b60005b8381101561184e578181015183820152602001611836565b838111156110c05750506000910152565b60008251611871818460208701611833565b9190910192915050565b602081526000825180602084015261189a816040850160208701611833565b601f01601f1916919091016040019291505056fe4d65726b6c654469737472696275746f723a20446973747269627574696f6e20a2646970667358221220605da5805cbf82536c2829812b48745625f43990f5a1822def6130358557eb8d64736f6c634300080f0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101005760003560e01c80639353b9df11610097578063bb245b0c11610066578063bb245b0c14610280578063cbfced2f14610293578063ccf362c8146102a6578063f2fde38b146102b957600080fd5b80639353b9df146101b4578063a429f1cb14610247578063a82613701461025a578063b224f6991461026d57600080fd5b8063698224ae116100d3578063698224ae14610170578063715018a6146101885780638da5cb5b14610190578063902bb5a1146101a157600080fd5b80630cd81f5b146101055780632f264d641461011a5780634f64b2be1461012d57806363c6a5e41461015d575b600080fd5b6101186101133660046113fa565b6102cc565b005b610118610128366004611480565b6105a6565b61014061013b3660046114b7565b6106c8565b6040516001600160a01b0390911681526020015b60405180910390f35b61011861016b3660046114d0565b6106f2565b61017a6276a70081565b604051908152602001610154565b610118610877565b6000546001600160a01b0316610140565b6101186101af3660046114eb565b61088b565b61020a6101c23660046114d0565b600260208190526000918252604090912080546001820154928201546003909201546001600160a01b0382169360ff600160a01b8404811694600160a81b9094041692909186565b604080516001600160a01b0390971687529415156020870152921515938501939093526060840152608083019190915260a082015260c001610154565b61011861025536600461151e565b610978565b6101186102683660046115a6565b610a31565b61011861027b3660046114eb565b610b10565b61011861028e36600461151e565b610c55565b6101186102a13660046114eb565b610d05565b61017a6102b4366004611680565b610e7e565b6101186102c73660046114d0565b610eea565b6001600160a01b0380871660009081526002602052604090205487911661030e5760405162461bcd60e51b8152600401610305906116b3565b60405180910390fd5b6001600160a01b038716600090815260026020526040902054600160a81b900460ff161561037f5760405162461bcd60e51b815260206004820152602a60248201526000805160206118af83398151915260448201526934b9903830bab9b2b21760b11b6064820152608401610305565b6001600160a01b038716600090815260026020908152604080832081519283018a90526bffffffffffffffffffffffff1960608a901b1691830191909152605482018790529190607401604051602081830303815290604052805190602001209050610422858580806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250505050600284015483610f63565b6104785760405162461bcd60e51b815260206004820152602160248201527f4d65726b6c654469737472696275746f723a20496e76616c69642070726f6f666044820152601760f91b6064820152608401610305565b6001600160a01b038716600090815260048301602052604090205486116104f15760405162461bcd60e51b815260206004820152602760248201527f4d65726b6c654469737472696275746f723a204e6f20636c61696d61626c65206044820152663a37b5b2b7399760c91b6064820152608401610305565b6001600160a01b03871660009081526004830160205260408120546105169088611706565b6001600160a01b03808a1660009081526004860160205260409020899055909150610544908b168983610f7b565b876001600160a01b03168a6001600160a01b03167f8dab6d35466ca3cba614bc5b262979b277949786977e81107f375f7e39f7734a8b84604051610592929190918252602082015260400190565b60405180910390a350505050505050505050565b6105ae610fde565b6001600160a01b038083166000908152600260205260409020548391166105e75760405162461bcd60e51b8152600401610305906116b3565b6001600160a01b038316600090815260026020526040902054821515600160a01b90910460ff1615150361066b5760405162461bcd60e51b815260206004820152602560248201527f4d65726b6c654469737472696275746f723a2056616c756520616c72656164796044820152641039b2ba1760d91b6064820152608401610305565b6001600160a01b0383166000908152600260205260409020805483158015600160a01b0260ff60a01b19909216919091179091556106c3576001600160a01b0383166000908152600260205260409020426001909101555b505050565b600181815481106106d857600080fd5b6000918252602090912001546001600160a01b0316905081565b6106fa610fde565b6001600160a01b038082166000908152600260205260409020548291166107335760405162461bcd60e51b8152600401610305906116b3565b6001600160a01b038216600090815260026020526040902054600160a01b900460ff166107b85760405162461bcd60e51b815260206004820152602d60248201527f4d65726b6c654469737472696275746f723a2054696d65206c696d697420697360448201526c103737ba1032b730b13632b21760991b6064820152608401610305565b6001600160a01b0382166000908152600260205260409020600101546107e2906276a7009061171d565b421161084c5760405162461bcd60e51b815260206004820152603360248201527f4d65726b6c654469737472696275746f723a2054696d65206c696d697420686160448201527239903737ba103132b2b7103932b0b1b432b21760691b6064820152608401610305565b506001600160a01b03166000908152600260205260409020805460ff60a81b1916600160a81b179055565b61087f610fde565b6108896000611038565b565b610893610fde565b6001600160a01b038084166000908152600260205260409020548491166108cc5760405162461bcd60e51b8152600401610305906116b3565b6108e16001600160a01b038516333085611088565b6001600160a01b03841660009081526002602081905260408220908101859055600301805484929061091490849061171d565b90915550506001600160a01b0384166000818152600260205260409081902042600190910155517f46749f2362413a5f0f53f7f11249e02052d810c56ead7bea2544c4a93a0828ee9061096a9085815260200190565b60405180910390a250505050565b610980610fde565b848314801561098e57508481145b6109aa5760405162461bcd60e51b815260040161030590611735565b60005b85811015610a2857610a168787838181106109ca576109ca611784565b90506020020160208101906109df91906114d0565b8686848181106109f1576109f1611784565b90506020020135858585818110610a0a57610a0a611784565b90506020020135610b10565b80610a208161179a565b9150506109ad565b50505050505050565b8786148015610a3f57508783145b8015610a4a57508781145b610a665760405162461bcd60e51b815260040161030590611735565b60005b88811015610b0457610af28a8a83818110610a8657610a86611784565b9050602002016020810190610a9b91906114d0565b898984818110610aad57610aad611784565b9050602002013588888886818110610ac757610ac7611784565b90506020020135878787818110610ae057610ae0611784565b905060200281019061011391906117b3565b80610afc8161179a565b915050610a69565b50505050505050505050565b610b18610fde565b6001600160a01b038381166000908152600260205260409020541615610b885760405162461bcd60e51b815260206004820152603160248201526000805160206118af83398151915260448201527034b99030b63932b0b23c9030b23232b21760791b6064820152608401610305565b610b9d6001600160a01b038416333084611088565b6001805480820182557fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf60180546001600160a01b0386166001600160a01b031991821681179092556000828152600260208190526040909120805490921683178255810185905560038101849055429083015581549091610c1d91611706565b6040518381527f7ee8a29714bdcaf6e579a4bf67cbc3ab1c50e0977c8f4021e61c48c1d2f217569060200160405180910390a3505050565b610c5d610fde565b8483148015610c6b57508481145b610c875760405162461bcd60e51b815260040161030590611735565b60005b85811015610a2857610cf3878783818110610ca757610ca7611784565b9050602002016020810190610cbc91906114d0565b868684818110610cce57610cce611784565b90506020020135858585818110610ce757610ce7611784565b9050602002013561088b565b80610cfd8161179a565b915050610c8a565b610d0d610fde565b6001600160a01b03808416600090815260026020526040902054849116610d465760405162461bcd60e51b8152600401610305906116b3565b6001600160a01b038416600090815260026020526040902054600160a81b900460ff16610dba5760405162461bcd60e51b815260206004820152602e60248201526000805160206118af83398151915260448201526d34b9903737ba103830bab9b2b21760911b6064820152608401610305565b6040516370a0823160e01b815230600482015284906000906001600160a01b038316906370a0823190602401602060405180830381865afa158015610e03573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e2791906117fd565b90508015610e4357610e436001600160a01b0383163383610f7b565b5050506001600160a01b039092166000908152600260208190526040909120908101919091556003810191909155805460ff60a81b19169055565b6001600160a01b038083166000908152600260205260408120549091849116610eb95760405162461bcd60e51b8152600401610305906116b3565b50506001600160a01b0391821660009081526002602090815260408083209390941682526004909201909152205490565b610ef2610fde565b6001600160a01b038116610f575760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610305565b610f6081611038565b50565b600082610f7085846110c6565b1490505b9392505050565b6040516001600160a01b0383166024820152604481018290526106c390849063a9059cbb60e01b906064015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152611113565b6000546001600160a01b031633146108895760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610305565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6040516001600160a01b03808516602483015283166044820152606481018290526110c09085906323b872dd60e01b90608401610fa7565b50505050565b600081815b845181101561110b576110f7828683815181106110ea576110ea611784565b60200260200101516111e5565b9150806111038161179a565b9150506110cb565b509392505050565b6000611168826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166112119092919063ffffffff16565b8051909150156106c357808060200190518101906111869190611816565b6106c35760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401610305565b6000818310611201576000828152602084905260409020610f74565b5060009182526020526040902090565b60606112208484600085611228565b949350505050565b6060824710156112895760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b6064820152608401610305565b6001600160a01b0385163b6112e05760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610305565b600080866001600160a01b031685876040516112fc919061185f565b60006040518083038185875af1925050503d8060008114611339576040519150601f19603f3d011682016040523d82523d6000602084013e61133e565b606091505b509150915061134e828286611359565b979650505050505050565b60608315611368575081610f74565b8251156113785782518084602001fd5b8160405162461bcd60e51b8152600401610305919061187b565b80356001600160a01b03811681146113a957600080fd5b919050565b60008083601f8401126113c057600080fd5b50813567ffffffffffffffff8111156113d857600080fd5b6020830191508360208260051b85010111156113f357600080fd5b9250929050565b60008060008060008060a0878903121561141357600080fd5b61141c87611392565b95506020870135945061143160408801611392565b935060608701359250608087013567ffffffffffffffff81111561145457600080fd5b61146089828a016113ae565b979a9699509497509295939492505050565b8015158114610f6057600080fd5b6000806040838503121561149357600080fd5b61149c83611392565b915060208301356114ac81611472565b809150509250929050565b6000602082840312156114c957600080fd5b5035919050565b6000602082840312156114e257600080fd5b610f7482611392565b60008060006060848603121561150057600080fd5b61150984611392565b95602085013595506040909401359392505050565b6000806000806000806060878903121561153757600080fd5b863567ffffffffffffffff8082111561154f57600080fd5b61155b8a838b016113ae565b9098509650602089013591508082111561157457600080fd5b6115808a838b016113ae565b9096509450604089013591508082111561159957600080fd5b5061146089828a016113ae565b600080600080600080600080600060a08a8c0312156115c457600080fd5b893567ffffffffffffffff808211156115dc57600080fd5b6115e88d838e016113ae565b909b50995060208c013591508082111561160157600080fd5b61160d8d838e016113ae565b909950975087915061162160408d01611392565b965060608c013591508082111561163757600080fd5b6116438d838e016113ae565b909650945060808c013591508082111561165c57600080fd5b506116698c828d016113ae565b915080935050809150509295985092959850929598565b6000806040838503121561169357600080fd5b61169c83611392565b91506116aa60208401611392565b90509250929050565b6020808252602f908201526000805160206118af83398151915260408201526e3237b2b9903737ba1032bc34b9ba1760891b606082015260800190565b634e487b7160e01b600052601160045260246000fd5b600082821015611718576117186116f0565b500390565b60008219821115611730576117306116f0565b500190565b6020808252602f908201527f4d65726b6c654469737472696275746f723a204172726179206c656e6774687360408201526e103732b2b2103a379036b0ba31b41760891b606082015260800190565b634e487b7160e01b600052603260045260246000fd5b6000600182016117ac576117ac6116f0565b5060010190565b6000808335601e198436030181126117ca57600080fd5b83018035915067ffffffffffffffff8211156117e557600080fd5b6020019150600581901b36038213156113f357600080fd5b60006020828403121561180f57600080fd5b5051919050565b60006020828403121561182857600080fd5b8151610f7481611472565b60005b8381101561184e578181015183820152602001611836565b838111156110c05750506000910152565b60008251611871818460208701611833565b9190910192915050565b602081526000825180602084015261189a816040850160208701611833565b601f01601f1916919091016040019291505056fe4d65726b6c654469737472696275746f723a20446973747269627574696f6e20a2646970667358221220605da5805cbf82536c2829812b48745625f43990f5a1822def6130358557eb8d64736f6c634300080f0033",
  "devdoc": {
    "details": "Based on https://github.com/Uniswap/merkle-distributor but modified to handle multiple airdrops concurrently",
    "kind": "dev",
    "methods": {
      "addDistribution(address,bytes32,uint256)": {
        "params": {
          "_merkleRoot": "merkle root for token distribution",
          "_token": "token address",
          "_totalAmount": "total distribution amount*"
        }
      },
      "addDistributions(address[],bytes32[],uint256[])": {
        "params": {
          "_merkleRoots": "list of merkle roots for each distribution",
          "_tokens": "the list of token addresses to add",
          "_totalAmounts": "list of total distribution amounts for each token*"
        }
      },
      "claimDistribution(address,uint256,address,uint256,bytes32[])": {
        "params": {
          "_account": "address of the account to claim for",
          "_amount": "lifetime amount of the token allocated to account",
          "_index": "index of the claim within the distribution",
          "_merkleProof": "the merkle proof for the token claim*",
          "_token": "token address"
        }
      },
      "claimDistributions(address[],uint256[],address,uint256[],bytes32[][])": {
        "params": {
          "_account": "address of the account to claim for",
          "_amounts": "list of lifetime amounts of the tokens allocated to account",
          "_indexes": "list of indexes of the claims within the distributions",
          "_merkleProofs": "list of merkle proofs for the token claims*",
          "_tokens": "list of token address"
        }
      },
      "getClaimed(address,address)": {
        "params": {
          "_account": "address of the account to return claimed amount for*",
          "_token": "token address"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "pauseForWithdrawal(address)": {
        "details": "must be called before withdrawUnlclaimedTokens to ensure state doesn't change while the new merkle root is calculated",
        "params": {
          "_token": "token address*"
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "setTimeLimitEnabled(address,bool)": {
        "params": {
          "_enabled": "whether to enable or disable the limit*",
          "_token": "token addresse"
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "updateDistribution(address,bytes32,uint256)": {
        "details": "merkle root should be updated to reflect additional amount - the amount for each account should be incremented by any additional allocation and any new accounts should be added to the tree",
        "params": {
          "_additionalAmount": "total additional distribution amount*",
          "_merkleRoot": "updated merkle root for token distribution",
          "_token": "token address"
        }
      },
      "updateDistributions(address[],bytes32[],uint256[])": {
        "params": {
          "_additionalAmounts": "list of total additional distribution amounts for each token*",
          "_merkleRoots": "list of updated merkle roots for the distributions",
          "_tokens": "the list of token addresses to update"
        }
      },
      "withdrawUnclaimedTokens(address,bytes32,uint256)": {
        "details": "merkle root should be updated to reflect current state of claims - the amount for each account should be equal to it's claimed amount",
        "params": {
          "_merkleRoot": "updated merkle root",
          "_token": "token address",
          "_totalAmount": "updated total amount*"
        }
      }
    },
    "title": "MerkleDistributor",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "addDistribution(address,bytes32,uint256)": {
        "notice": "add a token distribution"
      },
      "addDistributions(address[],bytes32[],uint256[])": {
        "notice": "add multiple token distributions"
      },
      "claimDistribution(address,uint256,address,uint256,bytes32[])": {
        "notice": "claim a token distribution"
      },
      "claimDistributions(address[],uint256[],address,uint256[],bytes32[][])": {
        "notice": "claim multiple token distributions"
      },
      "getClaimed(address,address)": {
        "notice": "returns the total amount that an account has claimed from a distribution"
      },
      "pauseForWithdrawal(address)": {
        "notice": "pauses a token distribution for withdrawal of unclaimed tokens"
      },
      "setTimeLimitEnabled(address,bool)": {
        "notice": "enables/disables the time limit for a token"
      },
      "updateDistribution(address,bytes32,uint256)": {
        "notice": "update a token distribution"
      },
      "updateDistributions(address[],bytes32[],uint256[])": {
        "notice": "update multiple token distributions"
      },
      "withdrawUnclaimedTokens(address,bytes32,uint256)": {
        "notice": "withdraws unclaimed tokens"
      }
    },
    "notice": "Handles token airdrops from an unlimited amount of token rewards",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 3767,
        "contract": "contracts/airdrop/MerkleDistributor.sol:MerkleDistributor",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 12534,
        "contract": "contracts/airdrop/MerkleDistributor.sol:MerkleDistributor",
        "label": "tokens",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 12539,
        "contract": "contracts/airdrop/MerkleDistributor.sol:MerkleDistributor",
        "label": "distributions",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_struct(Distribution)12531_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_struct(Distribution)12531_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct MerkleDistributor.Distribution)",
        "numberOfBytes": "32",
        "value": "t_struct(Distribution)12531_storage"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(Distribution)12531_storage": {
        "encoding": "inplace",
        "label": "struct MerkleDistributor.Distribution",
        "members": [
          {
            "astId": 12516,
            "contract": "contracts/airdrop/MerkleDistributor.sol:MerkleDistributor",
            "label": "token",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 12518,
            "contract": "contracts/airdrop/MerkleDistributor.sol:MerkleDistributor",
            "label": "timeLimitEnabled",
            "offset": 20,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 12520,
            "contract": "contracts/airdrop/MerkleDistributor.sol:MerkleDistributor",
            "label": "isPaused",
            "offset": 21,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 12522,
            "contract": "contracts/airdrop/MerkleDistributor.sol:MerkleDistributor",
            "label": "timeOfLastUpdate",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 12524,
            "contract": "contracts/airdrop/MerkleDistributor.sol:MerkleDistributor",
            "label": "merkleRoot",
            "offset": 0,
            "slot": "2",
            "type": "t_bytes32"
          },
          {
            "astId": 12526,
            "contract": "contracts/airdrop/MerkleDistributor.sol:MerkleDistributor",
            "label": "totalAmount",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 12530,
            "contract": "contracts/airdrop/MerkleDistributor.sol:MerkleDistributor",
            "label": "claimed",
            "offset": 0,
            "slot": "4",
            "type": "t_mapping(t_address,t_uint256)"
          }
        ],
        "numberOfBytes": "160"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}