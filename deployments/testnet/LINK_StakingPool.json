{
  "address": "0x92D8519A81C8724A5c1Fbe88bd079320E85F6Db5",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "_derivativeTokenName",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_derivativeTokenSymbol",
          "type": "string"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "receiver",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "basisPoints",
              "type": "uint256"
            }
          ],
          "internalType": "struct StakingPool.Fee[]",
          "name": "_fees",
          "type": "tuple[]"
        },
        {
          "internalType": "address",
          "name": "_poolRouter",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_delegatorPool",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Stake",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "totalStaked",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "int256",
          "name": "rewardsAmount",
          "type": "int256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "totalFees",
          "type": "uint256"
        }
      ],
      "name": "UpdateStrategyRewards",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Withdraw",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_receiver",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_feeBasisPoints",
          "type": "uint256"
        }
      ],
      "name": "addFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_strategy",
          "type": "address"
        }
      ],
      "name": "addStrategy",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        }
      ],
      "name": "allowance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "canDeposit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "canWithdraw",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "decimals",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "delegatorPool",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "depositLiquidity",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getFees",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "receiver",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "basisPoints",
              "type": "uint256"
            }
          ],
          "internalType": "struct StakingPool.Fee[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getMaxDeposits",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getMinDeposits",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "getSharesByStake",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "getStakeByShares",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getStrategies",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "liquidityBuffer",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "poolIndex",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "poolRouter",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_index",
          "type": "uint256"
        }
      ],
      "name": "removeStrategy",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "_newOrder",
          "type": "uint256[]"
        }
      ],
      "name": "reorderStrategies",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_liquidityBufferBasisPoints",
          "type": "uint256"
        }
      ],
      "name": "setLiquidityBuffer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "_poolIndex",
          "type": "uint16"
        }
      ],
      "name": "setPoolIndex",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        }
      ],
      "name": "sharesOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "stake",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_index",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "strategyDeposit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_index",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "strategyWithdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "token",
      "outputs": [
        {
          "internalType": "contract IERC677",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalShares",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalStaked",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transfer",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_value",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "transferAndCall",
      "outputs": [
        {
          "internalType": "bool",
          "name": "success",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_index",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_receiver",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_feeBasisPoints",
          "type": "uint256"
        }
      ],
      "name": "updateFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "_strategyIdxs",
          "type": "uint256[]"
        }
      ],
      "name": "updateStrategyRewards",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_receiver",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x690c6ea3aa4a931e5f44cabd6eb5c5b386c5c62a4ff32a326371d1ce533377a9",
  "receipt": {
    "to": null,
    "from": "0x11187eff852069a33d102476b2E8A9cc9167dAde",
    "contractAddress": "0x92D8519A81C8724A5c1Fbe88bd079320E85F6Db5",
    "transactionIndex": 0,
    "gasUsed": "3398868",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000001000000000000000000000000000000000000020000000000000000000800000000000000000000000000000000400000000000000000000000080000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000000c00000000000000000000000000000000020000080000000000000000000000000000000000000000000000000000000000000",
    "blockHash": "0xcfd58ca736db4138b47431a45db012d0ba0d6b3593900b0c97326037ba4addda",
    "transactionHash": "0x690c6ea3aa4a931e5f44cabd6eb5c5b386c5c62a4ff32a326371d1ce533377a9",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 903233,
        "transactionHash": "0x690c6ea3aa4a931e5f44cabd6eb5c5b386c5c62a4ff32a326371d1ce533377a9",
        "address": "0x92D8519A81C8724A5c1Fbe88bd079320E85F6Db5",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x00000000000000000000000011187eff852069a33d102476b2e8a9cc9167dade"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0xcfd58ca736db4138b47431a45db012d0ba0d6b3593900b0c97326037ba4addda"
      }
    ],
    "blockNumber": 903233,
    "cumulativeGasUsed": "3398868",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x2bb4ba85c749947A29BE60aE977Eb098EC66e833",
    "Staked LINK",
    "stLINK",
    [
      [
        "0x11187eff852069a33d102476b2E8A9cc9167dAde",
        300
      ]
    ],
    "0x86D2AFfd07Ab56F5371FE65f89F63d1B59bC8B12",
    "0xc593c83A4b5f88b976df1d1140124C565e764a72"
  ],
  "numDeployments": 1,
  "solcInputHash": "3b2625e8211dd6eaac71f4a881384a88",
  "metadata": "{\"compiler\":{\"version\":\"0.8.15+commit.e14f2714\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_derivativeTokenName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_derivativeTokenSymbol\",\"type\":\"string\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"basisPoints\",\"type\":\"uint256\"}],\"internalType\":\"struct StakingPool.Fee[]\",\"name\":\"_fees\",\"type\":\"tuple[]\"},{\"internalType\":\"address\",\"name\":\"_poolRouter\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_delegatorPool\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Stake\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalStaked\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"rewardsAmount\",\"type\":\"int256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalFees\",\"type\":\"uint256\"}],\"name\":\"UpdateStrategyRewards\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_feeBasisPoints\",\"type\":\"uint256\"}],\"name\":\"addFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_strategy\",\"type\":\"address\"}],\"name\":\"addStrategy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"canDeposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"canWithdraw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"delegatorPool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"depositLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getFees\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"basisPoints\",\"type\":\"uint256\"}],\"internalType\":\"struct StakingPool.Fee[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMaxDeposits\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMinDeposits\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"getSharesByStake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"getStakeByShares\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getStrategies\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidityBuffer\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolIndex\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolRouter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"removeStrategy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_newOrder\",\"type\":\"uint256[]\"}],\"name\":\"reorderStrategies\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_liquidityBufferBasisPoints\",\"type\":\"uint256\"}],\"name\":\"setLiquidityBuffer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_poolIndex\",\"type\":\"uint16\"}],\"name\":\"setPoolIndex\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"sharesOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"strategyDeposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"strategyWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"contract IERC677\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalShares\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalStaked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"transferAndCall\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_feeBasisPoints\",\"type\":\"uint256\"}],\"name\":\"updateFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_strategyIdxs\",\"type\":\"uint256[]\"}],\"name\":\"updateStrategyRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"addFee(address,uint256)\":{\"params\":{\"_feeBasisPoints\":\"fee in basis points*\",\"_receiver\":\"receiver of fee\"}},\"addStrategy(address)\":{\"params\":{\"_strategy\":\"address of strategy to add*\"}},\"allowance(address,address)\":{\"details\":\"Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called.\"},\"approve(address,uint256)\":{\"details\":\"Sets `amount` as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event.\"},\"balanceOf(address)\":{\"params\":{\"_account\":\"account to return balance for\"},\"returns\":{\"_0\":\"account's stake balance*\"}},\"canDeposit()\":{\"returns\":{\"_0\":\"available deposit room\"}},\"canWithdraw()\":{\"returns\":{\"_0\":\"available withdrawal room\"}},\"depositLiquidity()\":{\"details\":\"deposits into strategies[0] until its limit is reached, then strategies[1], and so on*\"},\"getFees()\":{\"returns\":{\"_0\":\"list of fees\"}},\"getMaxDeposits()\":{\"returns\":{\"_0\":\"the overall staking limit*\"}},\"getMinDeposits()\":{\"returns\":{\"_0\":\"min deposit\"}},\"getSharesByStake(uint256)\":{\"params\":{\"_amount\":\"staked amount\"},\"returns\":{\"_0\":\"amount of shares*\"}},\"getStakeByShares(uint256)\":{\"params\":{\"_amount\":\"shares amount\"},\"returns\":{\"_0\":\"amount of stake*\"}},\"getStrategies()\":{\"returns\":{\"_0\":\"list of strategies\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"removeStrategy(uint256)\":{\"params\":{\"_index\":\"index of strategy to remove*\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"reorderStrategies(uint256[])\":{\"params\":{\"_newOrder\":\"array containing strategy indexes in a new order*\"}},\"setLiquidityBuffer(uint256)\":{\"params\":{\"_liquidityBufferBasisPoints\":\"basis points to use for the liquidity buffer*\"}},\"setPoolIndex(uint16)\":{\"params\":{\"_poolIndex\":\"index of pool\"}},\"sharesOf(address)\":{\"params\":{\"_account\":\"account to return balance for\"},\"returns\":{\"_0\":\"account's share balance*\"}},\"stake(address,uint256)\":{\"params\":{\"_account\":\"account to stake for\",\"_amount\":\"amount to stake*\"}},\"strategyDeposit(uint256,uint256)\":{\"params\":{\"_amount\":\"amount to deposit*\",\"_index\":\"index of strategy to deposit in\"}},\"strategyWithdraw(uint256,uint256)\":{\"params\":{\"_amount\":\"amount to withdraw*\",\"_index\":\"index of strategy to withdraw from\"}},\"totalSupply()\":{\"returns\":{\"_0\":\"total supply\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"updateFee(uint256,address,uint256)\":{\"params\":{\"_feeBasisPoints\":\"fee in basis points*\",\"_index\":\"index of fee\",\"_receiver\":\"receiver of fee\"}},\"updateStrategyRewards(uint256[])\":{\"params\":{\"_strategyIdxs\":\"indexes of strategies to update rewards for*\"}},\"withdraw(address,address,uint256)\":{\"details\":\"will withdraw from strategies if not enough liquidity\",\"params\":{\"_account\":\"account to withdraw for\",\"_amount\":\"amount to withdraw*\",\"_receiver\":\"address to receive withdrawal\"}}},\"title\":\"Staking Pool\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"addFee(address,uint256)\":{\"notice\":\"adds a new fee\"},\"addStrategy(address)\":{\"notice\":\"adds a new strategy\"},\"balanceOf(address)\":{\"notice\":\"returns an account's stake balance\"},\"canDeposit()\":{\"notice\":\"returns the available deposit room for this pool\"},\"canWithdraw()\":{\"notice\":\"returns the available withdrawal room for this pool\"},\"depositLiquidity()\":{\"notice\":\"deposits available liquidity into strategies by order of priority\"},\"getFees()\":{\"notice\":\"returns a list of all fees\"},\"getMaxDeposits()\":{\"notice\":\"returns the maximum amount that can be staked via the pool\"},\"getMinDeposits()\":{\"notice\":\"returns the minimum amount that must remain the pool\"},\"getSharesByStake(uint256)\":{\"notice\":\"returns the amount of shares that corresponds to a staked amount\"},\"getStakeByShares(uint256)\":{\"notice\":\"returns the amount of stake that corresponds to an amount of shares\"},\"getStrategies()\":{\"notice\":\"returns a list of all active strategies\"},\"removeStrategy(uint256)\":{\"notice\":\"removes a strategy\"},\"reorderStrategies(uint256[])\":{\"notice\":\"reorders strategies\"},\"setLiquidityBuffer(uint256)\":{\"notice\":\"Sets the liquidity buffer. The liquidity buffer will increase the max staking limit of the pool by always keeping a % of the staked token as liquid within the pool. The buffer has the effect of diluting yield, but promotes pool liquidity with any lock-in that would prevent the un-wind of allowance.\"},\"setPoolIndex(uint16)\":{\"notice\":\"sets the index of this pool as stored in the pool router\"},\"sharesOf(address)\":{\"notice\":\"returns an account's share balance\"},\"stake(address,uint256)\":{\"notice\":\"stakes asset tokens and mints derivative tokens\"},\"strategyDeposit(uint256,uint256)\":{\"notice\":\"deposits assets in a strategy\"},\"strategyWithdraw(uint256,uint256)\":{\"notice\":\"withdraws assets from a strategy\"},\"totalSupply()\":{\"notice\":\"returns the total supply of staking derivative tokens\"},\"updateFee(uint256,address,uint256)\":{\"notice\":\"updates an existing fee\"},\"updateStrategyRewards(uint256[])\":{\"notice\":\"updates and distributes rewards based on balance changes in strategies\"},\"withdraw(address,address,uint256)\":{\"notice\":\"withdraws asset tokens and burns derivative tokens\"}},\"notice\":\"Allows users to stake an asset and receive derivative tokens 1:1, then deposits staked assets into strategy contracts to earn returns\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/core/StakingPool.sol\":\"StakingPool\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n        }\\n        _balances[to] += amount;\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0x24b04b8aacaaf1a4a0719117b29c9c3647b1f479c5ac2a60f5ff1bb6d839c238\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xf41ca991f30855bf80ffd11e9347856a517b977f0a6c2d52e6421a99b7840329\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/draft-IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x032807210d1d7d218963d7355d62e021a84bf1b3339f4f50be2f63b53cccaf29\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd6153ce99bcdcce22b124f755e72553295be6abcd63804cfdffceb188b8bef10\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"contracts/core/StakingPool.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.15;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\nimport \\\"./base/StakingRewardsPool.sol\\\";\\nimport \\\"./interfaces/IStrategy.sol\\\";\\nimport \\\"./interfaces/IWrappedSDToken.sol\\\";\\nimport \\\"./interfaces/IDelegatorPool.sol\\\";\\n\\n/**\\n * @title Staking Pool\\n * @notice Allows users to stake an asset and receive derivative tokens 1:1, then deposits staked\\n * assets into strategy contracts to earn returns\\n */\\ncontract StakingPool is StakingRewardsPool, Ownable {\\n    using SafeERC20 for IERC677;\\n\\n    struct Fee {\\n        address receiver;\\n        uint basisPoints;\\n    }\\n\\n    address[] private strategies;\\n    uint public totalStaked;\\n    uint public liquidityBuffer;\\n\\n    Fee[] private fees;\\n\\n    address public immutable poolRouter;\\n    address public immutable delegatorPool;\\n    uint16 public poolIndex;\\n\\n    event Stake(address indexed account, uint amount);\\n    event Withdraw(address indexed account, uint amount);\\n    event UpdateStrategyRewards(address indexed account, uint totalStaked, int rewardsAmount, uint totalFees);\\n\\n    constructor(\\n        address _token,\\n        string memory _derivativeTokenName,\\n        string memory _derivativeTokenSymbol,\\n        Fee[] memory _fees,\\n        address _poolRouter,\\n        address _delegatorPool\\n    ) StakingRewardsPool(_token, _derivativeTokenName, _derivativeTokenSymbol) {\\n        for (uint i = 0; i < _fees.length; i++) {\\n            fees.push(_fees[i]);\\n        }\\n        poolRouter = _poolRouter;\\n        delegatorPool = _delegatorPool;\\n    }\\n\\n    modifier onlyRouter() {\\n        require(poolRouter == msg.sender, \\\"PoolRouter only\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @notice returns a list of all active strategies\\n     * @return list of strategies\\n     */\\n    function getStrategies() external view returns (address[] memory) {\\n        return strategies;\\n    }\\n\\n    /**\\n     * @notice returns a list of all fees\\n     * @return list of fees\\n     */\\n    function getFees() external view returns (Fee[] memory) {\\n        return fees;\\n    }\\n\\n    /**\\n     * @notice stakes asset tokens and mints derivative tokens\\n     * @param _account account to stake for\\n     * @param _amount amount to stake\\n     **/\\n    function stake(address _account, uint _amount) external onlyRouter {\\n        require(strategies.length > 0, \\\"Must be > 0 strategies to stake\\\");\\n\\n        token.safeTransferFrom(msg.sender, address(this), _amount);\\n        depositLiquidity();\\n\\n        _mint(_account, _amount);\\n        totalStaked += _amount;\\n\\n        emit Stake(_account, _amount);\\n    }\\n\\n    /**\\n     * @notice withdraws asset tokens and burns derivative tokens\\n     * @dev will withdraw from strategies if not enough liquidity\\n     * @param _account account to withdraw for\\n     * @param _receiver address to receive withdrawal\\n     * @param _amount amount to withdraw\\n     **/\\n    function withdraw(\\n        address _account,\\n        address _receiver,\\n        uint _amount\\n    ) external onlyRouter {\\n        uint toWithdraw = _amount;\\n        if (_amount == type(uint).max) {\\n            toWithdraw = balanceOf(_account);\\n        }\\n\\n        uint balance = token.balanceOf(address(this));\\n        if (toWithdraw > balance) {\\n            _withdrawLiquidity(toWithdraw - balance);\\n        }\\n        require(token.balanceOf(address(this)) >= toWithdraw, \\\"Not enough liquidity available to withdraw\\\");\\n\\n        _burn(_account, toWithdraw);\\n        totalStaked -= toWithdraw;\\n        token.safeTransfer(_receiver, toWithdraw);\\n\\n        emit Withdraw(_account, toWithdraw);\\n    }\\n\\n    /**\\n     * @notice deposits assets in a strategy\\n     * @param _index index of strategy to deposit in\\n     * @param _amount amount to deposit\\n     **/\\n    function strategyDeposit(uint _index, uint _amount) external onlyOwner {\\n        require(_index < strategies.length, \\\"Strategy does not exist\\\");\\n        IStrategy(strategies[_index]).deposit(_amount);\\n    }\\n\\n    /**\\n     * @notice withdraws assets from a strategy\\n     * @param _index index of strategy to withdraw from\\n     * @param _amount amount to withdraw\\n     **/\\n    function strategyWithdraw(uint _index, uint _amount) external onlyOwner {\\n        require(_index < strategies.length, \\\"Strategy does not exist\\\");\\n        IStrategy(strategies[_index]).withdraw(_amount);\\n    }\\n\\n    /**\\n     * @notice returns the maximum amount that can be staked via the pool\\n     * @return the overall staking limit\\n     **/\\n    function getMaxDeposits() public view returns (uint256) {\\n        uint256 max;\\n\\n        for (uint i = 0; i < strategies.length; i++) {\\n            IStrategy strategy = IStrategy(strategies[i]);\\n            max += strategy.getMaxDeposits();\\n        }\\n        if (liquidityBuffer > 0) {\\n            max += (max * liquidityBuffer) / 10000;\\n        }\\n        return max;\\n    }\\n\\n    /**\\n     * @notice returns the minimum amount that must remain the pool\\n     * @return min deposit\\n     */\\n    function getMinDeposits() public view returns (uint256) {\\n        uint256 min;\\n\\n        for (uint i = 0; i < strategies.length; i++) {\\n            IStrategy strategy = IStrategy(strategies[i]);\\n            min += strategy.getMinDeposits();\\n        }\\n\\n        return min;\\n    }\\n\\n    /**\\n     * @notice returns the available deposit room for this pool\\n     * @return available deposit room\\n     */\\n    function canDeposit() external view returns (uint256) {\\n        uint max = getMaxDeposits();\\n\\n        if (max <= totalStaked) {\\n            return 0;\\n        } else {\\n            return max - totalStaked;\\n        }\\n    }\\n\\n    /**\\n     * @notice returns the available withdrawal room for this pool\\n     * @return available withdrawal room\\n     */\\n    function canWithdraw() external view returns (uint256) {\\n        uint min = getMinDeposits();\\n\\n        if (min >= totalStaked) {\\n            return 0;\\n        } else {\\n            return totalStaked - min;\\n        }\\n    }\\n\\n    /**\\n     * @notice adds a new strategy\\n     * @param _strategy address of strategy to add\\n     **/\\n    function addStrategy(address _strategy) external onlyOwner {\\n        require(!_strategyExists(_strategy), \\\"Strategy already exists\\\");\\n        token.safeApprove(_strategy, type(uint).max);\\n        strategies.push(_strategy);\\n    }\\n\\n    /**\\n     * @notice removes a strategy\\n     * @param _index index of strategy to remove\\n     **/\\n    function removeStrategy(uint _index) external onlyOwner {\\n        require(_index < strategies.length, \\\"Strategy does not exist\\\");\\n\\n        uint[] memory idxs = new uint[](1);\\n        idxs[0] = _index;\\n        updateStrategyRewards(idxs);\\n\\n        IStrategy strategy = IStrategy(strategies[_index]);\\n        uint totalStrategyDeposits = strategy.getTotalDeposits();\\n        if (totalStrategyDeposits > 0) {\\n            require(strategy.canWithdraw() == totalStrategyDeposits, \\\"Strategy contains deposits that cannot be withdrawn\\\");\\n            strategy.withdraw(totalStrategyDeposits);\\n        }\\n\\n        for (uint i = _index; i < strategies.length - 1; i++) {\\n            strategies[i] = strategies[i + 1];\\n        }\\n        strategies.pop();\\n        token.safeApprove(address(strategy), 0);\\n    }\\n\\n    /**\\n     * @notice reorders strategies\\n     * @param _newOrder array containing strategy indexes in a new order\\n     **/\\n    function reorderStrategies(uint[] calldata _newOrder) external onlyOwner {\\n        require(_newOrder.length == strategies.length, \\\"newOrder.length must = strategies.length\\\");\\n\\n        address[] memory strategyAddresses = new address[](strategies.length);\\n        for (uint i = 0; i < strategies.length; i++) {\\n            strategyAddresses[i] = strategies[i];\\n        }\\n\\n        for (uint i = 0; i < strategies.length; i++) {\\n            require(strategyAddresses[_newOrder[i]] != address(0), \\\"all indices must be valid\\\");\\n            strategies[i] = strategyAddresses[_newOrder[i]];\\n            strategyAddresses[_newOrder[i]] = address(0);\\n        }\\n    }\\n\\n    /**\\n     * @notice adds a new fee\\n     * @param _receiver receiver of fee\\n     * @param _feeBasisPoints fee in basis points\\n     **/\\n    function addFee(address _receiver, uint _feeBasisPoints) external onlyOwner {\\n        fees.push(Fee(_receiver, _feeBasisPoints));\\n    }\\n\\n    /**\\n     * @notice updates an existing fee\\n     * @param _index index of fee\\n     * @param _receiver receiver of fee\\n     * @param _feeBasisPoints fee in basis points\\n     **/\\n    function updateFee(\\n        uint _index,\\n        address _receiver,\\n        uint _feeBasisPoints\\n    ) external onlyOwner {\\n        require(_index < fees.length, \\\"Fee does not exist\\\");\\n\\n        if (_feeBasisPoints == 0) {\\n            fees[_index] = fees[fees.length - 1];\\n            fees.pop();\\n        } else {\\n            fees[_index].receiver = _receiver;\\n            fees[_index].basisPoints = _feeBasisPoints;\\n        }\\n    }\\n\\n    /**\\n     * @notice Sets the liquidity buffer. The liquidity buffer will increase the max staking limit\\n     * of the pool by always keeping a % of the staked token as liquid within the pool. The buffer\\n     * has the effect of diluting yield, but promotes pool liquidity with any lock-in that would prevent\\n     * the un-wind of allowance.\\n     * @param _liquidityBufferBasisPoints basis points to use for the liquidity buffer\\n     **/\\n    function setLiquidityBuffer(uint _liquidityBufferBasisPoints) external onlyOwner {\\n        liquidityBuffer = _liquidityBufferBasisPoints;\\n    }\\n\\n    /**\\n     * @notice updates and distributes rewards based on balance changes in strategies\\n     * @param _strategyIdxs indexes of strategies to update rewards for\\n     **/\\n    function updateStrategyRewards(uint[] memory _strategyIdxs) public {\\n        int totalRewards;\\n        uint totalFeeAmounts;\\n        uint totalFeeCount;\\n        address[][] memory receivers = new address[][](strategies.length + 1);\\n        uint[][] memory feeAmounts = new uint[][](strategies.length + 1);\\n\\n        for (uint i = 0; i < _strategyIdxs.length; i++) {\\n            IStrategy strategy = IStrategy(strategies[_strategyIdxs[i]]);\\n            int rewards = strategy.depositChange();\\n            if (rewards != 0) {\\n                (address[] memory strategyReceivers, uint[] memory strategyFeeAmounts) = strategy.updateDeposits();\\n                totalRewards += rewards;\\n                if (rewards > 0) {\\n                    receivers[i] = (strategyReceivers);\\n                    feeAmounts[i] = (strategyFeeAmounts);\\n                    totalFeeCount += receivers[i].length;\\n                    for (uint j = 0; j < strategyReceivers.length; j++) {\\n                        totalFeeAmounts += strategyFeeAmounts[j];\\n                    }\\n                }\\n            }\\n        }\\n\\n        if (totalRewards != 0) {\\n            totalStaked = uint(int(totalStaked) + totalRewards);\\n        }\\n\\n        if (totalRewards > 0) {\\n            uint currentRate = IDelegatorPool(delegatorPool).currentRate(address(token), poolIndex);\\n            uint feesLength = currentRate > 0 ? fees.length + 1 : fees.length;\\n\\n            receivers[receivers.length - 1] = new address[](feesLength);\\n            feeAmounts[feeAmounts.length - 1] = new uint[](feesLength);\\n            totalFeeCount += feesLength;\\n\\n            for (uint i = 0; i < fees.length; i++) {\\n                receivers[receivers.length - 1][i] = fees[i].receiver;\\n                feeAmounts[feeAmounts.length - 1][i] = (uint(totalRewards) * fees[i].basisPoints) / 10000;\\n                totalFeeAmounts += feeAmounts[feeAmounts.length - 1][i];\\n            }\\n\\n            if (currentRate > 0) {\\n                receivers[receivers.length - 1][fees.length] = delegatorPool;\\n                feeAmounts[feeAmounts.length - 1][fees.length] = (uint(totalRewards) * currentRate) / 10000;\\n                totalFeeAmounts += feeAmounts[feeAmounts.length - 1][fees.length];\\n            }\\n        }\\n\\n        if (totalFeeAmounts > 0) {\\n            uint sharesToMint = (totalFeeAmounts * totalShares) / (totalStaked - totalFeeAmounts);\\n            _mintShares(address(this), sharesToMint);\\n\\n            uint feesPaidCount;\\n            for (uint i = 0; i < receivers.length; i++) {\\n                for (uint j = 0; j < receivers[i].length; j++) {\\n                    if (feesPaidCount == totalFeeCount - 1) {\\n                        transferAndCallFrom(address(this), receivers[i][j], balanceOf(address(this)), \\\"0x00\\\");\\n                    } else {\\n                        transferAndCallFrom(address(this), receivers[i][j], feeAmounts[i][j], \\\"0x00\\\");\\n                        feesPaidCount++;\\n                    }\\n                }\\n            }\\n        }\\n\\n        emit UpdateStrategyRewards(msg.sender, totalStaked, totalRewards, totalFeeAmounts);\\n    }\\n\\n    /**\\n     * @notice deposits available liquidity into strategies by order of priority\\n     * @dev deposits into strategies[0] until its limit is reached, then strategies[1], and so on\\n     **/\\n    function depositLiquidity() public {\\n        uint toDeposit = token.balanceOf(address(this));\\n        if (toDeposit > 0) {\\n            for (uint i = 0; i < strategies.length; i++) {\\n                IStrategy strategy = IStrategy(strategies[i]);\\n                uint canDeposit = strategy.canDeposit();\\n                if (canDeposit >= toDeposit) {\\n                    strategy.deposit(toDeposit);\\n                    break;\\n                } else if (canDeposit > 0) {\\n                    strategy.deposit(canDeposit);\\n                    toDeposit -= canDeposit;\\n                }\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice sets the index of this pool as stored in the pool router\\n     * @param _poolIndex index of pool\\n     */\\n    function setPoolIndex(uint16 _poolIndex) external onlyRouter {\\n        poolIndex = _poolIndex;\\n    }\\n\\n    /**\\n     * @notice returns the total amount of assets staked in the pool\\n     * @return the total staked amount\\n     */\\n    function _totalStaked() internal view override returns (uint) {\\n        return totalStaked;\\n    }\\n\\n    /**\\n     * @notice withdraws liquidity from strategies in opposite order of priority\\n     * @dev withdraws from strategies[strategies.length - 1], then strategies[strategies.length - 2], and so on\\n     * until withdraw amount is reached\\n     * @param _amount amount to withdraw\\n     **/\\n    function _withdrawLiquidity(uint _amount) private {\\n        uint toWithdraw = _amount;\\n\\n        for (uint i = strategies.length; i > 0; i--) {\\n            IStrategy strategy = IStrategy(strategies[i - 1]);\\n            uint canWithdraw = strategy.canWithdraw();\\n\\n            if (canWithdraw >= toWithdraw) {\\n                strategy.withdraw(toWithdraw);\\n                break;\\n            } else if (canWithdraw > 0) {\\n                strategy.withdraw(canWithdraw);\\n                toWithdraw -= canWithdraw;\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice checks whether or not a strategy exists\\n     * @param _strategy address of strategy\\n     * @return true if strategy exists, false otherwise\\n     **/\\n    function _strategyExists(address _strategy) private view returns (bool) {\\n        for (uint i = 0; i < strategies.length; i++) {\\n            if (strategies[i] == _strategy) {\\n                return true;\\n            }\\n        }\\n        return false;\\n    }\\n}\\n\",\"keccak256\":\"0x180f9ee0beb2c9ccaf89d9a283a5c8d4af83526a78ff19d2d87721d9aa286e09\",\"license\":\"UNLICENSED\"},\"contracts/core/base/StakingRewardsPool.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.15;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\nimport \\\"../tokens/base/VirtualERC677.sol\\\";\\n\\n/**\\n * @title StakingRewardsPool\\n * @notice Handles staking and reward distribution for a single asset\\n * @dev Rewards can be positive or negative (user balances can increase and decrease)\\n */\\nabstract contract StakingRewardsPool is VirtualERC677 {\\n    using SafeERC20 for IERC677;\\n\\n    IERC677 public immutable token;\\n\\n    mapping(address => uint) private shares;\\n    uint public totalShares;\\n\\n    constructor(\\n        address _token,\\n        string memory _derivativeTokenName,\\n        string memory _derivativeTokenSymbol\\n    ) VirtualERC677(_derivativeTokenName, _derivativeTokenSymbol) {\\n        token = IERC677(_token);\\n    }\\n\\n    /**\\n     * @notice returns the total supply of staking derivative tokens\\n     * @return total supply\\n     */\\n    function totalSupply() public view override(IERC20, VirtualERC20) returns (uint) {\\n        return _totalStaked();\\n    }\\n\\n    /**\\n     * @notice returns an account's stake balance\\n     * @param _account account to return balance for\\n     * @return account's stake balance\\n     **/\\n    function balanceOf(address _account) public view override(IERC20, VirtualERC20) returns (uint) {\\n        uint balance = getStakeByShares(shares[_account]);\\n        if (balance < 100) {\\n            return 0;\\n        } else {\\n            return balance;\\n        }\\n    }\\n\\n    /**\\n     * @notice returns an account's share balance\\n     * @param _account account to return balance for\\n     * @return account's share balance\\n     **/\\n    function sharesOf(address _account) public view returns (uint) {\\n        return shares[_account];\\n    }\\n\\n    /**\\n     * @notice returns the amount of shares that corresponds to a staked amount\\n     * @param _amount staked amount\\n     * @return amount of shares\\n     **/\\n    function getSharesByStake(uint256 _amount) public view returns (uint256) {\\n        uint totalStaked = _totalStaked();\\n        if (totalStaked == 0) {\\n            return 0;\\n        } else {\\n            return (_amount * totalShares) / totalStaked;\\n        }\\n    }\\n\\n    /**\\n     * @notice returns the amount of stake that corresponds to an amount of shares\\n     * @param _amount shares amount\\n     * @return amount of stake\\n     **/\\n    function getStakeByShares(uint256 _amount) public view returns (uint256) {\\n        if (totalShares == 0) {\\n            return 0;\\n        } else {\\n            return (_amount * _totalStaked()) / totalShares;\\n        }\\n    }\\n\\n    /**\\n     * @notice returns the total amount of assets staked in the pool\\n     * @return total staked amount\\n     */\\n    function _totalStaked() internal view virtual returns (uint);\\n\\n    /**\\n     * @notice transfers a stake balance from one account to another\\n     * @param _sender account to transfer from\\n     * @param _recipient account to transfer to\\n     * @param _amount amount to transfer\\n     **/\\n    function _transfer(\\n        address _sender,\\n        address _recipient,\\n        uint _amount\\n    ) internal override {\\n        uint sharesToTransfer = getSharesByStake(_amount);\\n\\n        require(_sender != address(0), \\\"Transfer from the zero address\\\");\\n        require(_recipient != address(0), \\\"Transfer to the zero address\\\");\\n        require(shares[_sender] >= sharesToTransfer, \\\"Transfer amount exceeds balance\\\");\\n\\n        shares[_sender] -= sharesToTransfer;\\n        shares[_recipient] += sharesToTransfer;\\n\\n        emit Transfer(_sender, _recipient, _amount);\\n    }\\n\\n    /**\\n     * @notice mints new shares to an account\\n     * @dev takes a stake amount and calculates the amount of shares it corresponds to\\n     * @param _recipient account to mint shares for\\n     * @param _amount stake amount\\n     **/\\n    function _mint(address _recipient, uint _amount) internal override {\\n        uint sharesToMint = getSharesByStake(_amount);\\n        if (sharesToMint == 0) {\\n            sharesToMint = _amount;\\n        }\\n\\n        _mintShares(_recipient, sharesToMint);\\n    }\\n\\n    /**\\n     * @notice mints new shares to an account\\n     * @param _recipient account to mint shares for\\n     * @param _amount shares amount\\n     **/\\n    function _mintShares(address _recipient, uint _amount) internal {\\n        require(_recipient != address(0), \\\"Mint to the zero address\\\");\\n\\n        totalShares += _amount;\\n        shares[_recipient] += _amount;\\n    }\\n\\n    /**\\n     * @notice burns shares belonging to an account\\n     * @dev takes a stake amount and calculates the amount of shares it corresponds to\\n     * @param _account account to burn shares for\\n     * @param _amount stake amount\\n     **/\\n    function _burn(address _account, uint _amount) internal override {\\n        uint sharesToBurn = getSharesByStake(_amount);\\n\\n        require(_account != address(0), \\\"Burn from the zero address\\\");\\n        require(shares[_account] >= sharesToBurn, \\\"Burn amount exceeds balance\\\");\\n\\n        totalShares -= sharesToBurn;\\n        shares[_account] -= sharesToBurn;\\n    }\\n}\\n\",\"keccak256\":\"0xf09bdf0f193b78c7e6ea8338d3653f4c2487d5cea919ff63cfedc60a5f95e8d9\",\"license\":\"UNLICENSED\"},\"contracts/core/interfaces/IDelegatorPool.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.15;\\n\\nimport \\\"./IERC677.sol\\\";\\n\\ninterface IDelegatorPool is IERC677 {\\n    function currentRate(address _token, uint16 _index) external view returns (uint256);\\n\\n    function stakeAllowance(address _account, uint _amount) external;\\n}\\n\",\"keccak256\":\"0xe6245e1fd0c1b8d901a9986060db5c7c2cf5c00ed4d75e579755dbd6883600c2\",\"license\":\"UNLICENSED\"},\"contracts/core/interfaces/IERC677.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.15;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IERC677 is IERC20 {\\n    function transferAndCall(\\n        address _to,\\n        uint256 _value,\\n        bytes calldata _data\\n    ) external returns (bool success);\\n}\\n\",\"keccak256\":\"0x85fb796082bc45f2eb85a84af73983fdfefed6ff9acbc936373d45360a5973cf\",\"license\":\"UNLICENSED\"},\"contracts/core/interfaces/IERC677Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.15;\\n\\ninterface IERC677Receiver {\\n    function onTokenTransfer(\\n        address _sender,\\n        uint256 _value,\\n        bytes calldata _data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x3f02ee4c32eb96a3f6d6d16cc8b90f48b971d2b3ad99afc3bd3c6d0789fa3d66\",\"license\":\"UNLICENSED\"},\"contracts/core/interfaces/IStrategy.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.15;\\n\\ninterface IStrategy {\\n    function deposit(uint256 _amount) external;\\n\\n    function withdraw(uint256 _amount) external;\\n\\n    function updateDeposits() external returns (address[] memory receivers, uint[] memory amounts);\\n\\n    function getTotalDeposits() external view returns (uint256);\\n\\n    function getMaxDeposits() external view returns (uint256);\\n\\n    function getMinDeposits() external view returns (uint256);\\n\\n    function canDeposit() external view returns (uint256);\\n\\n    function canWithdraw() external view returns (uint256);\\n\\n    function depositChange() external view returns (int256);\\n}\\n\",\"keccak256\":\"0xc9146e3ec0adee1d80148459e5e5b48832fd8ba79bef561f4692f7829a1e7337\",\"license\":\"UNLICENSED\"},\"contracts/core/interfaces/IWrappedSDToken.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.15;\\n\\nimport \\\"./IERC677.sol\\\";\\n\\ninterface IWrappedSDToken is IERC677 {\\n    /**\\n     * @notice wraps tokens\\n     * @param _amount amount of unwrapped tokens to wrap\\n     */\\n    function wrap(uint _amount) external;\\n\\n    /**\\n     * @notice unwraps tokens\\n     * @param _amount amount of wrapped tokens to unwrap\\n     */\\n    function unwrap(uint _amount) external;\\n\\n    /**\\n     * @notice Returns amount of unwrapped tokens for an amount of wrapped tokens\\n     * @param _amount amount of wrapped tokens\\n     * @return amount of unwrapped tokens\\n     */\\n    function getUnderlyingByWrapped(uint _amount) external view returns (uint);\\n\\n    function sdToken() external view returns (address);\\n}\\n\",\"keccak256\":\"0xc2fa9bf5b288a278df5114a6430bd80632ca947615d0d4d8e077758ff18eef5b\",\"license\":\"UNLICENSED\"},\"contracts/core/tokens/base/VirtualERC20.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.15;\\n\\nimport \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ncontract VirtualERC20 is IERC20, Context {\\n    using Address for address;\\n\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n    uint8 private _decimals;\\n\\n    constructor(string memory tokenName, string memory tokenSymbol) {\\n        _name = tokenName;\\n        _symbol = tokenSymbol;\\n        _decimals = 18;\\n    }\\n\\n    function name() public view returns (string memory) {\\n        return _name;\\n    }\\n\\n    function symbol() public view returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    function decimals() public view returns (uint256) {\\n        return _decimals;\\n    }\\n\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n        require(_allowances[sender][_msgSender()] >= amount, \\\"ERC20: transfer amount exceeds allowance\\\");\\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()] - amount);\\n        return true;\\n    }\\n\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _totalSupply = _totalSupply + amount;\\n        _balances[account] = _balances[account] + amount;\\n        emit Transfer(address(0), account, amount);\\n    }\\n\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n        require(_balances[account] >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n\\n        _balances[account] = _balances[account] - amount;\\n        _totalSupply = _totalSupply - amount;\\n        emit Transfer(account, address(0), amount);\\n    }\\n\\n    function _transfer(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n        require(_balances[sender] >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n\\n        _balances[sender] = _balances[sender] - amount;\\n        _balances[recipient] = _balances[recipient] + amount;\\n        emit Transfer(sender, recipient, amount);\\n    }\\n\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n}\\n\",\"keccak256\":\"0x0993df6f26b316deb415ec9041f840a9607dccaa0ae8f79f64ec6f4b631d8280\",\"license\":\"UNLICENSED\"},\"contracts/core/tokens/base/VirtualERC677.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.15;\\n\\nimport \\\"./VirtualERC20.sol\\\";\\nimport \\\"../../interfaces/IERC677.sol\\\";\\nimport \\\"../../interfaces/IERC677Receiver.sol\\\";\\n\\ncontract VirtualERC677 is IERC677, VirtualERC20 {\\n    constructor(string memory tokenName, string memory tokenSymbol) VirtualERC20(tokenName, tokenSymbol) {}\\n\\n    function transferAndCall(\\n        address _to,\\n        uint256 _value,\\n        bytes calldata _data\\n    ) public override returns (bool success) {\\n        super.transfer(_to, _value);\\n        if (isContract(_to)) {\\n            contractFallback(msg.sender, _to, _value, _data);\\n        }\\n        return true;\\n    }\\n\\n    function transferAndCallFrom(\\n        address _sender,\\n        address _to,\\n        uint256 _value,\\n        bytes memory _data\\n    ) internal returns (bool) {\\n        _transfer(_sender, _to, _value);\\n        if (isContract(_to)) {\\n            contractFallback(_sender, _to, _value, _data);\\n        }\\n        return true;\\n    }\\n\\n    function contractFallback(\\n        address _sender,\\n        address _to,\\n        uint256 _value,\\n        bytes memory _data\\n    ) private {\\n        IERC677Receiver receiver = IERC677Receiver(_to);\\n        receiver.onTokenTransfer(_sender, _value, _data);\\n    }\\n\\n    function isContract(address _addr) private view returns (bool hasCode) {\\n        uint256 length;\\n        assembly {\\n            length := extcodesize(_addr)\\n        }\\n        return length > 0;\\n    }\\n}\\n\",\"keccak256\":\"0x954a9bbdb9266ca452af0ac735e8a98c51b04724f523ab8a9088291e5b6a931f\",\"license\":\"UNLICENSED\"}},\"version\":1}",
  "bytecode": "0x60e06040523480156200001157600080fd5b5060405162003f7338038062003f738339810160408190526200003491620002a5565b8585858181818160036200004983826200049c565b5060046200005882826200049c565b50506005805460ff191660121790555050506001600160a01b03909216608052506200008d9050620000873390565b6200012d565b60005b83518110156200010f57600c848281518110620000b157620000b162000568565b602090810291909101810151825460018082018555600094855293839020825160029092020180546001600160a01b0319166001600160a01b039092169190911781559101519101558062000106816200057e565b91505062000090565b506001600160a01b0391821660a0521660c05250620005a692505050565b600880546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b80516001600160a01b03811681146200019757600080fd5b919050565b634e487b7160e01b600052604160045260246000fd5b604080519081016001600160401b0381118282101715620001d757620001d76200019c565b60405290565b604051601f8201601f191681016001600160401b03811182821017156200020857620002086200019c565b604052919050565b600082601f8301126200022257600080fd5b81516001600160401b038111156200023e576200023e6200019c565b602062000254601f8301601f19168201620001dd565b82815285828487010111156200026957600080fd5b60005b83811015620002895785810183015182820184015282016200026c565b838111156200029b5760008385840101525b5095945050505050565b60008060008060008060c08789031215620002bf57600080fd5b620002ca876200017f565b602088810151919750906001600160401b0380821115620002ea57600080fd5b620002f88b838c0162000210565b975060409150818a0151818111156200031057600080fd5b6200031e8c828d0162000210565b97505060608a0151818111156200033457600080fd5b8a01601f81018c136200034657600080fd5b8051828111156200035b576200035b6200019c565b6200036b858260051b01620001dd565b818152858101935060069190911b82018501908d8211156200038c57600080fd5b918501915b81831015620003da5784838f031215620003ab5760008081fd5b620003b5620001b2565b620003c0846200017f565b815283870151878201528452928501929184019162000391565b809850505050505050620003f1608088016200017f565b91506200040160a088016200017f565b90509295509295509295565b600181811c908216806200042257607f821691505b6020821081036200044357634e487b7160e01b600052602260045260246000fd5b50919050565b601f8211156200049757600081815260208120601f850160051c81016020861015620004725750805b601f850160051c820191505b8181101562000493578281556001016200047e565b5050505b505050565b81516001600160401b03811115620004b857620004b86200019c565b620004d081620004c984546200040d565b8462000449565b602080601f831160018114620005085760008415620004ef5750858301515b600019600386901b1c1916600185901b17855562000493565b600085815260208120601f198616915b82811015620005395788860151825594840194600190910190840162000518565b5085821015620005585787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b634e487b7160e01b600052603260045260246000fd5b6000600182016200059f57634e487b7160e01b600052601160045260246000fd5b5060010190565b60805160a05160c051613942620006316000396000818161039401528181610a270152610d1a01526000818161035501528181610678015281816116e5015261211e0152600081816105ac015281816109f1015281816110a40152818161178701528181611e2a01528181611ee80152818161219101528181612237015261233a01526139426000f3fe608060405234801561001057600080fd5b506004361061025e5760003560e01c80638da5cb5b11610146578063ca593c59116100c3578063dd62ed3e11610087578063dd62ed3e14610522578063e78a58751461055b578063eb47dc8f14610563578063f2fde38b1461056b578063f5eb42dc1461057e578063fc0c546a146105a757600080fd5b8063ca593c59146104d6578063cc3f4e20146104de578063d7379028146104e7578063d9caed12146104fa578063db8d55f11461050d57600080fd5b8063b49a60bb1161010a578063b49a60bb1461048b578063b51459fe146104a0578063b7b7a408146104a8578063c0cbbca6146104b0578063c2c44eed146104c357600080fd5b80638da5cb5b1461043957806395d89b411461044a578063a9059cbb14610452578063adc9772e14610465578063b47529c51461047857600080fd5b80634ce272ee116101df5780637718238f116101a35780637718238f146103d1578063790965d9146103e4578063817b1cd2146103f75780638be89123146104005780638ce09bb8146104135780638d09487f1461042657600080fd5b80634ce272ee1461032f5780635452b9ba146103505780635deb761f1461038f57806370a08231146103b6578063715018a6146103c957600080fd5b8063223e547911610226578063223e5479146102e257806323b872dd146102f5578063313ce567146103085780633a98ef39146103135780634000aea01461031c57600080fd5b806306fdde0314610263578063095ea7b3146102815780630e16611f146102a457806318160ddd146102b957806320951d3e146102cf575b600080fd5b61026b6105ce565b6040516102789190613199565b60405180910390f35b61029461028f3660046131c1565b610660565b6040519015158152602001610278565b6102b76102b23660046131ed565b610676565b005b6102c16106df565b604051908152602001610278565b6102b76102dd36600461327c565b6106ef565b6102b76102f0366004613307565b611039565b610294610303366004613324565b61111f565b60055460ff166102c1565b6102c160075481565b61029461032a366004613365565b6111f6565b600d5461033d9061ffff1681565b60405161ffff9091168152602001610278565b6103777f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b039091168152602001610278565b6103777f000000000000000000000000000000000000000000000000000000000000000081565b6102c16103c4366004613307565b611257565b6102b761129b565b6102b76103df3660046131c1565b6112af565b6102b76103f23660046133ee565b61134c565b6102c1600a5481565b6102b761040e366004613410565b6113f4565b6102c1610421366004613410565b611401565b6102b7610434366004613429565b611439565b6008546001600160a01b0316610377565b61026b6116c7565b6102946104603660046131c1565b6116d6565b6102b76104733660046131c1565b6116e3565b6102b761048636600461349e565b61181a565b6104936119a0565b60405161027891906134c5565b6102c1611a01565b6102c1611a33565b6102b76104be366004613410565b611b23565b6102b76104d13660046133ee565b611e5a565b6102b7611ed0565b6102c1600b5481565b6102c16104f5366004613410565b6120ee565b6102b7610508366004613324565b61211c565b6105156123ab565b6040516102789190613512565b6102c161053036600461356a565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b6102c1612420565b6102c161244b565b6102b7610579366004613307565b612505565b6102c161058c366004613307565b6001600160a01b031660009081526006602052604090205490565b6103777f000000000000000000000000000000000000000000000000000000000000000081565b6060600380546105dd906135a3565b80601f0160208091040260200160405190810160405280929190818152602001828054610609906135a3565b80156106565780601f1061062b57610100808354040283529160200191610656565b820191906000526020600020905b81548152906001019060200180831161063957829003601f168201915b5050505050905090565b600061066d33848461257b565b50600192915050565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031633146106c75760405162461bcd60e51b81526004016106be906135d7565b60405180910390fd5b600d805461ffff191661ffff92909216919091179055565b60006106ea600a5490565b905090565b60008060008060098054905060016107079190613616565b67ffffffffffffffff81111561071f5761071f613211565b60405190808252806020026020018201604052801561075257816020015b606081526020019060019003908161073d5790505b50600954909150600090610767906001613616565b67ffffffffffffffff81111561077f5761077f613211565b6040519080825280602002602001820160405280156107b257816020015b606081526020019060019003908161079d5790505b50905060005b86518110156109b557600060098883815181106107d7576107d761362e565b6020026020010151815481106107ef576107ef61362e565b60009182526020808320909101546040805163eec7da5760e01b815290516001600160a01b039092169450849263eec7da57926004808401938290030181865afa158015610841573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108659190613644565b905080156109a057600080836001600160a01b031663c175b3d16040518163ffffffff1660e01b81526004016000604051808303816000875af11580156108b0573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526108d891908101906136c3565b90925090506108e7838b613788565b9950600083131561099d57818786815181106109055761090561362e565b6020026020010181905250808686815181106109235761092361362e565b60200260200101819052508685815181106109405761094061362e565b602002602001015151886109549190613616565b975060005b825181101561099b578181815181106109745761097461362e565b60200260200101518a6109879190613616565b995080610993816137c9565b915050610959565b505b50505b505080806109ad906137c9565b9150506107b8565b5084156109ce5784600a546109ca9190613788565b600a555b6000851315610e4457600d54604051630139321960e21b81526001600160a01b037f00000000000000000000000000000000000000000000000000000000000000008116600483015261ffff90921660248201526000917f000000000000000000000000000000000000000000000000000000000000000016906304e4c86490604401602060405180830381865afa158015610a6e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a929190613644565b90506000808211610aa557600c54610ab3565b600c54610ab3906001613616565b90508067ffffffffffffffff811115610ace57610ace613211565b604051908082528060200260200182016040528015610af7578160200160208202803683370190505b508460018651610b0791906137e2565b81518110610b1757610b1761362e565b60200260200101819052508067ffffffffffffffff811115610b3b57610b3b613211565b604051908082528060200260200182016040528015610b64578160200160208202803683370190505b508360018551610b7491906137e2565b81518110610b8457610b8461362e565b6020908102919091010152610b998186613616565b945060005b600c54811015610d1157600c8181548110610bbb57610bbb61362e565b600091825260209091206002909102015485516001600160a01b03909116908690610be8906001906137e2565b81518110610bf857610bf861362e565b60200260200101518281518110610c1157610c1161362e565b60200260200101906001600160a01b031690816001600160a01b031681525050612710600c8281548110610c4757610c4761362e565b90600052602060002090600202016001015489610c6491906137f9565b610c6e9190613818565b8460018651610c7d91906137e2565b81518110610c8d57610c8d61362e565b60200260200101518281518110610ca657610ca661362e565b6020026020010181815250508360018551610cc191906137e2565b81518110610cd157610cd161362e565b60200260200101518181518110610cea57610cea61362e565b602002602001015187610cfd9190613616565b965080610d09816137c9565b915050610b9e565b508115610e41577f00000000000000000000000000000000000000000000000000000000000000008460018651610d4891906137e2565b81518110610d5857610d5861362e565b6020026020010151600c8054905081518110610d7657610d7661362e565b6001600160a01b0390921660209283029190910190910152612710610d9b83896137f9565b610da59190613818565b8360018551610db491906137e2565b81518110610dc457610dc461362e565b6020026020010151600c8054905081518110610de257610de261362e565b6020026020010181815250508260018451610dfd91906137e2565b81518110610e0d57610e0d61362e565b6020026020010151600c8054905081518110610e2b57610e2b61362e565b602002602001015186610e3e9190613616565b95505b50505b8315610fec57600084600a54610e5a91906137e2565b600754610e6790876137f9565b610e719190613818565b9050610e7d308261269f565b6000805b8451811015610fe85760005b858281518110610e9f57610e9f61362e565b602002602001015151811015610fd557610eba6001886137e2565b8303610f2857610f2230878481518110610ed657610ed661362e565b60200260200101518381518110610eef57610eef61362e565b6020026020010151610f0030611257565b604051806040016040528060048152602001630307830360e41b81525061273d565b50610fc3565b610fb430878481518110610f3e57610f3e61362e565b60200260200101518381518110610f5757610f5761362e565b6020026020010151878581518110610f7157610f7161362e565b60200260200101518481518110610f8a57610f8a61362e565b6020026020010151604051806040016040528060048152602001630307830360e41b81525061273d565b5082610fbf816137c9565b9350505b80610fcd816137c9565b915050610e8d565b5080610fe0816137c9565b915050610e81565b5050505b600a546040805191825260208201879052810185905233907f04f794b9bb152df3a9f2aa7b424206ce2c2c26ef386bb1fea8325cdfdcd339569060600160405180910390a2505050505050565b61104161275d565b61104a816127b7565b156110975760405162461bcd60e51b815260206004820152601760248201527f537472617465677920616c72656164792065786973747300000000000000000060448201526064016106be565b6110cd6001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001682600019612820565b600980546001810182556000919091527f6e1540171b6c0c960b71a7020d9f60077f6af931a8bbf590da0223dacf75c7af0180546001600160a01b0319166001600160a01b0392909216919091179055565b600061112c848484612968565b6001600160a01b03841660009081526001602090815260408083203384529091529020548211156111b05760405162461bcd60e51b815260206004820152602860248201527f45524332303a207472616e7366657220616d6f756e74206578636565647320616044820152676c6c6f77616e636560c01b60648201526084016106be565b6001600160a01b0384166000908152600160209081526040808320338085529252909120546111eb9186916111e69086906137e2565b61257b565b5060015b9392505050565b600061120285856116d6565b50843b1561124c5761124c33868686868080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250612b3892505050565b506001949350505050565b6001600160a01b038116600090815260066020526040812054819061127b906120ee565b9050606481101561128f5750600092915050565b92915050565b50919050565b6112a361275d565b6112ad6000612ba3565b565b6112b761275d565b604080518082019091526001600160a01b03928316815260208101918252600c805460018101825560009190915290517fdf6966c971051c3d54ec59162606531493a51404a002842f56009d7e5cf4a8c7600290920291820180546001600160a01b0319169190941617909255517fdf6966c971051c3d54ec59162606531493a51404a002842f56009d7e5cf4a8c890910155565b61135461275d565b60095482106113755760405162461bcd60e51b81526004016106be9061383a565b600982815481106113885761138861362e565b60009182526020909120015460405163b6b55f2560e01b8152600481018390526001600160a01b039091169063b6b55f25906024015b600060405180830381600087803b1580156113d857600080fd5b505af11580156113ec573d6000803e3d6000fd5b505050505050565b6113fc61275d565b600b55565b60008061140d600a5490565b9050806000036114205750600092915050565b806007548461142f91906137f9565b6111ef9190613818565b61144161275d565b60095481146114a35760405162461bcd60e51b815260206004820152602860248201527f6e65774f726465722e6c656e677468206d757374203d207374726174656769656044820152670e65cd8cadccee8d60c31b60648201526084016106be565b60095460009067ffffffffffffffff8111156114c1576114c1613211565b6040519080825280602002602001820160405280156114ea578160200160208202803683370190505b50905060005b600954811015611567576009818154811061150d5761150d61362e565b9060005260206000200160009054906101000a90046001600160a01b031682828151811061153d5761153d61362e565b6001600160a01b03909216602092830291909101909101528061155f816137c9565b9150506114f0565b5060005b6009548110156116c15760008285858481811061158a5761158a61362e565b90506020020135815181106115a1576115a161362e565b60200260200101516001600160a01b0316036115ff5760405162461bcd60e51b815260206004820152601960248201527f616c6c20696e6469636573206d7573742062652076616c69640000000000000060448201526064016106be565b818484838181106116125761161261362e565b90506020020135815181106116295761162961362e565b6020026020010151600982815481106116445761164461362e565b6000918252602082200180546001600160a01b0319166001600160a01b039390931692909217909155828585848181106116805761168061362e565b90506020020135815181106116975761169761362e565b6001600160a01b0390921660209283029190910190910152806116b9816137c9565b91505061156b565b50505050565b6060600480546105dd906135a3565b600061066d338484612968565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316331461172b5760405162461bcd60e51b81526004016106be906135d7565b60095461177a5760405162461bcd60e51b815260206004820152601f60248201527f4d757374206265203e2030207374726174656769657320746f207374616b650060448201526064016106be565b6117af6001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016333084612bf5565b6117b7611ed0565b6117c18282612c2d565b80600a60008282546117d39190613616565b90915550506040518181526001600160a01b038316907febedb8b3c678666e7f36970bc8f57abf6d8fa2e828c0da91ea5b75bf68ed101a9060200160405180910390a25050565b61182261275d565b600c5483106118685760405162461bcd60e51b815260206004820152601260248201527111995948191bd95cc81b9bdd08195e1a5cdd60721b60448201526064016106be565b8060000361192857600c8054611880906001906137e2565b815481106118905761189061362e565b9060005260206000209060020201600c84815481106118b1576118b161362e565b60009182526020909120825460029092020180546001600160a01b0319166001600160a01b03909216919091178155600191820154910155600c8054806118fa576118fa613871565b60008281526020812060026000199093019283020180546001600160a01b0319168155600101559055505050565b81600c848154811061193c5761193c61362e565b906000526020600020906002020160000160006101000a8154816001600160a01b0302191690836001600160a01b0316021790555080600c84815481106119855761198561362e565b9060005260206000209060020201600101819055505b505050565b6060600980548060200260200160405190810160405280929190818152602001828054801561065657602002820191906000526020600020905b81546001600160a01b031681526001909101906020018083116119da575050505050905090565b600080611a0c61244b565b9050600a548110611a1f57600091505090565b80600a54611a2d91906137e2565b91505090565b60008060005b600954811015611aed57600060098281548110611a5857611a5861362e565b60009182526020918290200154604080516316f6f48160e31b815290516001600160a01b039092169350839263b7b7a408926004808401938290030181865afa158015611aa9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611acd9190613644565b611ad79084613616565b9250508080611ae5906137c9565b915050611a39565b50600b5415611b1e57612710600b5482611b0791906137f9565b611b119190613818565b611b1b9082613616565b90505b919050565b611b2b61275d565b6009548110611b4c5760405162461bcd60e51b81526004016106be9061383a565b604080516001808252818301909252600091602080830190803683370190505090508181600081518110611b8257611b8261362e565b602002602001018181525050611b97816106ef565b600060098381548110611bac57611bac61362e565b600091825260208083209091015460408051630b45241160e11b815290516001600160a01b039092169450849263168a4822926004808401938290030181865afa158015611bfe573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c229190613644565b90508015611d515780826001600160a01b031663b51459fe6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611c69573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c8d9190613644565b14611cf65760405162461bcd60e51b815260206004820152603360248201527f537472617465677920636f6e7461696e73206465706f7369747320746861742060448201527231b0b73737ba103132903bb4ba34323930bbb760691b60648201526084016106be565b604051632e1a7d4d60e01b8152600481018290526001600160a01b03831690632e1a7d4d90602401600060405180830381600087803b158015611d3857600080fd5b505af1158015611d4c573d6000803e3d6000fd5b505050505b835b600954611d62906001906137e2565b811015611ded576009611d76826001613616565b81548110611d8657611d8661362e565b600091825260209091200154600980546001600160a01b039092169183908110611db257611db261362e565b600091825260209091200180546001600160a01b0319166001600160a01b039290921691909117905580611de5816137c9565b915050611d53565b506009805480611dff57611dff613871565b600082815260208120820160001990810180546001600160a01b03191690559091019091556116c1907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316908490612820565b611e6261275d565b6009548210611e835760405162461bcd60e51b81526004016106be9061383a565b60098281548110611e9657611e9661362e565b600091825260209091200154604051632e1a7d4d60e01b8152600481018390526001600160a01b0390911690632e1a7d4d906024016113be565b6040516370a0823160e01b81523060048201526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a0823190602401602060405180830381865afa158015611f37573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f5b9190613644565b905080156120eb5760005b6009548110156120e957600060098281548110611f8557611f8561362e565b60009182526020808320909101546040805163e78a587560e01b815290516001600160a01b039092169450849263e78a5875926004808401938290030181865afa158015611fd7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ffb9190613644565b90508381106120655760405163b6b55f2560e01b8152600481018590526001600160a01b0383169063b6b55f2590602401600060405180830381600087803b15801561204657600080fd5b505af115801561205a573d6000803e3d6000fd5b5050505050506120e9565b80156120d45760405163b6b55f2560e01b8152600481018290526001600160a01b0383169063b6b55f2590602401600060405180830381600087803b1580156120ad57600080fd5b505af11580156120c1573d6000803e3d6000fd5b5050505080846120d191906137e2565b93505b505080806120e1906137c9565b915050611f66565b505b50565b600060075460000361210257506000919050565b600754600a5461211290846137f9565b61128f9190613818565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031633146121645760405162461bcd60e51b81526004016106be906135d7565b80600181016121795761217684611257565b90505b6040516370a0823160e01b81523060048201526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a0823190602401602060405180830381865afa1580156121e0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122049190613644565b9050808211156122205761222061221b82846137e2565b612c4f565b6040516370a0823160e01b815230600482015282907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a0823190602401602060405180830381865afa158015612286573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122aa9190613644565b101561230b5760405162461bcd60e51b815260206004820152602a60248201527f4e6f7420656e6f756768206c697175696469747920617661696c61626c6520746044820152696f20776974686472617760b01b60648201526084016106be565b6123158583612daa565b81600a600082825461232791906137e2565b9091555061236190506001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000168584612ebe565b846001600160a01b03167f884edad9ce6fa2440d8a54cc123490eb96d2768479d49ff9c7366125a94243648360405161239c91815260200190565b60405180910390a25050505050565b6060600c805480602002602001604051908101604052809291908181526020016000905b82821015612417576000848152602090819020604080518082019091526002850290910180546001600160a01b031682526001908101548284015290835290920191016123cf565b50505050905090565b60008061242b611a33565b9050600a54811161243e57600091505090565b600a54611a2d90826137e2565b60008060005b600954811015611295576000600982815481106124705761247061362e565b600091825260209182902001546040805163eb47dc8f60e01b815290516001600160a01b039092169350839263eb47dc8f926004808401938290030181865afa1580156124c1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124e59190613644565b6124ef9084613616565b92505080806124fd906137c9565b915050612451565b61250d61275d565b6001600160a01b0381166125725760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016106be565b6120eb81612ba3565b6001600160a01b0383166125dd5760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b60648201526084016106be565b6001600160a01b03821661263e5760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b60648201526084016106be565b6001600160a01b0383811660008181526001602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505050565b6001600160a01b0382166126f55760405162461bcd60e51b815260206004820152601860248201527f4d696e7420746f20746865207a65726f2061646472657373000000000000000060448201526064016106be565b80600760008282546127079190613616565b90915550506001600160a01b03821660009081526006602052604081208054839290612734908490613616565b90915550505050565b600061274a858585612968565b833b1561124c5761124c85858585612b38565b6008546001600160a01b031633146112ad5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016106be565b6000805b60095481101561281757826001600160a01b0316600982815481106127e2576127e261362e565b6000918252602090912001546001600160a01b0316036128055750600192915050565b8061280f816137c9565b9150506127bb565b50600092915050565b80158061289a5750604051636eb1769f60e11b81523060048201526001600160a01b03838116602483015284169063dd62ed3e90604401602060405180830381865afa158015612874573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906128989190613644565b155b6129055760405162461bcd60e51b815260206004820152603660248201527f5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f60448201527520746f206e6f6e2d7a65726f20616c6c6f77616e636560501b60648201526084016106be565b6040516001600160a01b03831660248201526044810182905261199b90849063095ea7b360e01b906064015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152612eee565b600061297382611401565b90506001600160a01b0384166129cb5760405162461bcd60e51b815260206004820152601e60248201527f5472616e736665722066726f6d20746865207a65726f2061646472657373000060448201526064016106be565b6001600160a01b038316612a215760405162461bcd60e51b815260206004820152601c60248201527f5472616e7366657220746f20746865207a65726f20616464726573730000000060448201526064016106be565b6001600160a01b038416600090815260066020526040902054811115612a895760405162461bcd60e51b815260206004820152601f60248201527f5472616e7366657220616d6f756e7420657863656564732062616c616e63650060448201526064016106be565b6001600160a01b03841660009081526006602052604081208054839290612ab19084906137e2565b90915550506001600160a01b03831660009081526006602052604081208054839290612ade908490613616565b92505081905550826001600160a01b0316846001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef84604051612b2a91815260200190565b60405180910390a350505050565b604051635260769b60e11b815283906001600160a01b0382169063a4c0ed3690612b6a90889087908790600401613887565b600060405180830381600087803b158015612b8457600080fd5b505af1158015612b98573d6000803e3d6000fd5b505050505050505050565b600880546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6040516001600160a01b03808516602483015283166044820152606481018290526116c19085906323b872dd60e01b90608401612931565b6000612c3882611401565b905080600003612c455750805b61199b838261269f565b60095481905b801561199b5760006009612c6a6001846137e2565b81548110612c7a57612c7a61362e565b600091825260208083209091015460408051635a8a2cff60e11b815290516001600160a01b039092169450849263b51459fe926004808401938290030181865afa158015612ccc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612cf09190613644565b9050838110612d2657604051632e1a7d4d60e01b8152600481018590526001600160a01b03831690632e1a7d4d90602401612b6a565b8015612d9557604051632e1a7d4d60e01b8152600481018290526001600160a01b03831690632e1a7d4d90602401600060405180830381600087803b158015612d6e57600080fd5b505af1158015612d82573d6000803e3d6000fd5b505050508084612d9291906137e2565b93505b50508080612da2906138b7565b915050612c55565b6000612db582611401565b90506001600160a01b038316612e0d5760405162461bcd60e51b815260206004820152601a60248201527f4275726e2066726f6d20746865207a65726f206164647265737300000000000060448201526064016106be565b6001600160a01b038316600090815260066020526040902054811115612e755760405162461bcd60e51b815260206004820152601b60248201527f4275726e20616d6f756e7420657863656564732062616c616e6365000000000060448201526064016106be565b8060076000828254612e8791906137e2565b90915550506001600160a01b03831660009081526006602052604081208054839290612eb49084906137e2565b9091555050505050565b6040516001600160a01b03831660248201526044810182905261199b90849063a9059cbb60e01b90606401612931565b6000612f43826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316612fc09092919063ffffffff16565b80519091501561199b5780806020019051810190612f6191906138ce565b61199b5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b60648201526084016106be565b6060612fcf8484600085612fd7565b949350505050565b6060824710156130385760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b60648201526084016106be565b6001600160a01b0385163b61308f5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016106be565b600080866001600160a01b031685876040516130ab91906138f0565b60006040518083038185875af1925050503d80600081146130e8576040519150601f19603f3d011682016040523d82523d6000602084013e6130ed565b606091505b50915091506130fd828286613108565b979650505050505050565b606083156131175750816111ef565b8251156131275782518084602001fd5b8160405162461bcd60e51b81526004016106be9190613199565b60005b8381101561315c578181015183820152602001613144565b838111156116c15750506000910152565b60008151808452613185816020860160208601613141565b601f01601f19169290920160200192915050565b6020815260006111ef602083018461316d565b6001600160a01b03811681146120eb57600080fd5b600080604083850312156131d457600080fd5b82356131df816131ac565b946020939093013593505050565b6000602082840312156131ff57600080fd5b813561ffff811681146111ef57600080fd5b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff8111828210171561325057613250613211565b604052919050565b600067ffffffffffffffff82111561327257613272613211565b5060051b60200190565b6000602080838503121561328f57600080fd5b823567ffffffffffffffff8111156132a657600080fd5b8301601f810185136132b757600080fd5b80356132ca6132c582613258565b613227565b81815260059190911b820183019083810190878311156132e957600080fd5b928401925b828410156130fd578335825292840192908401906132ee565b60006020828403121561331957600080fd5b81356111ef816131ac565b60008060006060848603121561333957600080fd5b8335613344816131ac565b92506020840135613354816131ac565b929592945050506040919091013590565b6000806000806060858703121561337b57600080fd5b8435613386816131ac565b935060208501359250604085013567ffffffffffffffff808211156133aa57600080fd5b818701915087601f8301126133be57600080fd5b8135818111156133cd57600080fd5b8860208285010111156133df57600080fd5b95989497505060200194505050565b6000806040838503121561340157600080fd5b50508035926020909101359150565b60006020828403121561342257600080fd5b5035919050565b6000806020838503121561343c57600080fd5b823567ffffffffffffffff8082111561345457600080fd5b818501915085601f83011261346857600080fd5b81358181111561347757600080fd5b8660208260051b850101111561348c57600080fd5b60209290920196919550909350505050565b6000806000606084860312156134b357600080fd5b833592506020840135613354816131ac565b6020808252825182820181905260009190848201906040850190845b818110156135065783516001600160a01b0316835292840192918401916001016134e1565b50909695505050505050565b602080825282518282018190526000919060409081850190868401855b8281101561355d57815180516001600160a01b0316855286015186850152928401929085019060010161352f565b5091979650505050505050565b6000806040838503121561357d57600080fd5b8235613588816131ac565b91506020830135613598816131ac565b809150509250929050565b600181811c908216806135b757607f821691505b60208210810361129557634e487b7160e01b600052602260045260246000fd5b6020808252600f908201526e506f6f6c526f75746572206f6e6c7960881b604082015260600190565b634e487b7160e01b600052601160045260246000fd5b6000821982111561362957613629613600565b500190565b634e487b7160e01b600052603260045260246000fd5b60006020828403121561365657600080fd5b5051919050565b600082601f83011261366e57600080fd5b8151602061367e6132c583613258565b82815260059290921b8401810191818101908684111561369d57600080fd5b8286015b848110156136b857805183529183019183016136a1565b509695505050505050565b600080604083850312156136d657600080fd5b825167ffffffffffffffff808211156136ee57600080fd5b818501915085601f83011261370257600080fd5b815160206137126132c583613258565b82815260059290921b8401810191818101908984111561373157600080fd5b948201945b83861015613758578551613749816131ac565b82529482019490820190613736565b9188015191965090935050508082111561377157600080fd5b5061377e8582860161365d565b9150509250929050565b600080821280156001600160ff1b03849003851316156137aa576137aa613600565b600160ff1b83900384128116156137c3576137c3613600565b50500190565b6000600182016137db576137db613600565b5060010190565b6000828210156137f4576137f4613600565b500390565b600081600019048311821515161561381357613813613600565b500290565b60008261383557634e487b7160e01b600052601260045260246000fd5b500490565b60208082526017908201527f537472617465677920646f6573206e6f74206578697374000000000000000000604082015260600190565b634e487b7160e01b600052603160045260246000fd5b60018060a01b03841681528260208201526060604082015260006138ae606083018461316d565b95945050505050565b6000816138c6576138c6613600565b506000190190565b6000602082840312156138e057600080fd5b815180151581146111ef57600080fd5b60008251613902818460208701613141565b919091019291505056fea264697066735822122064b6b1291e6325ed142b3e529220f7e4845f954e5abd362aa23d82a596e0d10c64736f6c634300080f0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061025e5760003560e01c80638da5cb5b11610146578063ca593c59116100c3578063dd62ed3e11610087578063dd62ed3e14610522578063e78a58751461055b578063eb47dc8f14610563578063f2fde38b1461056b578063f5eb42dc1461057e578063fc0c546a146105a757600080fd5b8063ca593c59146104d6578063cc3f4e20146104de578063d7379028146104e7578063d9caed12146104fa578063db8d55f11461050d57600080fd5b8063b49a60bb1161010a578063b49a60bb1461048b578063b51459fe146104a0578063b7b7a408146104a8578063c0cbbca6146104b0578063c2c44eed146104c357600080fd5b80638da5cb5b1461043957806395d89b411461044a578063a9059cbb14610452578063adc9772e14610465578063b47529c51461047857600080fd5b80634ce272ee116101df5780637718238f116101a35780637718238f146103d1578063790965d9146103e4578063817b1cd2146103f75780638be89123146104005780638ce09bb8146104135780638d09487f1461042657600080fd5b80634ce272ee1461032f5780635452b9ba146103505780635deb761f1461038f57806370a08231146103b6578063715018a6146103c957600080fd5b8063223e547911610226578063223e5479146102e257806323b872dd146102f5578063313ce567146103085780633a98ef39146103135780634000aea01461031c57600080fd5b806306fdde0314610263578063095ea7b3146102815780630e16611f146102a457806318160ddd146102b957806320951d3e146102cf575b600080fd5b61026b6105ce565b6040516102789190613199565b60405180910390f35b61029461028f3660046131c1565b610660565b6040519015158152602001610278565b6102b76102b23660046131ed565b610676565b005b6102c16106df565b604051908152602001610278565b6102b76102dd36600461327c565b6106ef565b6102b76102f0366004613307565b611039565b610294610303366004613324565b61111f565b60055460ff166102c1565b6102c160075481565b61029461032a366004613365565b6111f6565b600d5461033d9061ffff1681565b60405161ffff9091168152602001610278565b6103777f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b039091168152602001610278565b6103777f000000000000000000000000000000000000000000000000000000000000000081565b6102c16103c4366004613307565b611257565b6102b761129b565b6102b76103df3660046131c1565b6112af565b6102b76103f23660046133ee565b61134c565b6102c1600a5481565b6102b761040e366004613410565b6113f4565b6102c1610421366004613410565b611401565b6102b7610434366004613429565b611439565b6008546001600160a01b0316610377565b61026b6116c7565b6102946104603660046131c1565b6116d6565b6102b76104733660046131c1565b6116e3565b6102b761048636600461349e565b61181a565b6104936119a0565b60405161027891906134c5565b6102c1611a01565b6102c1611a33565b6102b76104be366004613410565b611b23565b6102b76104d13660046133ee565b611e5a565b6102b7611ed0565b6102c1600b5481565b6102c16104f5366004613410565b6120ee565b6102b7610508366004613324565b61211c565b6105156123ab565b6040516102789190613512565b6102c161053036600461356a565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b6102c1612420565b6102c161244b565b6102b7610579366004613307565b612505565b6102c161058c366004613307565b6001600160a01b031660009081526006602052604090205490565b6103777f000000000000000000000000000000000000000000000000000000000000000081565b6060600380546105dd906135a3565b80601f0160208091040260200160405190810160405280929190818152602001828054610609906135a3565b80156106565780601f1061062b57610100808354040283529160200191610656565b820191906000526020600020905b81548152906001019060200180831161063957829003601f168201915b5050505050905090565b600061066d33848461257b565b50600192915050565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031633146106c75760405162461bcd60e51b81526004016106be906135d7565b60405180910390fd5b600d805461ffff191661ffff92909216919091179055565b60006106ea600a5490565b905090565b60008060008060098054905060016107079190613616565b67ffffffffffffffff81111561071f5761071f613211565b60405190808252806020026020018201604052801561075257816020015b606081526020019060019003908161073d5790505b50600954909150600090610767906001613616565b67ffffffffffffffff81111561077f5761077f613211565b6040519080825280602002602001820160405280156107b257816020015b606081526020019060019003908161079d5790505b50905060005b86518110156109b557600060098883815181106107d7576107d761362e565b6020026020010151815481106107ef576107ef61362e565b60009182526020808320909101546040805163eec7da5760e01b815290516001600160a01b039092169450849263eec7da57926004808401938290030181865afa158015610841573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108659190613644565b905080156109a057600080836001600160a01b031663c175b3d16040518163ffffffff1660e01b81526004016000604051808303816000875af11580156108b0573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526108d891908101906136c3565b90925090506108e7838b613788565b9950600083131561099d57818786815181106109055761090561362e565b6020026020010181905250808686815181106109235761092361362e565b60200260200101819052508685815181106109405761094061362e565b602002602001015151886109549190613616565b975060005b825181101561099b578181815181106109745761097461362e565b60200260200101518a6109879190613616565b995080610993816137c9565b915050610959565b505b50505b505080806109ad906137c9565b9150506107b8565b5084156109ce5784600a546109ca9190613788565b600a555b6000851315610e4457600d54604051630139321960e21b81526001600160a01b037f00000000000000000000000000000000000000000000000000000000000000008116600483015261ffff90921660248201526000917f000000000000000000000000000000000000000000000000000000000000000016906304e4c86490604401602060405180830381865afa158015610a6e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a929190613644565b90506000808211610aa557600c54610ab3565b600c54610ab3906001613616565b90508067ffffffffffffffff811115610ace57610ace613211565b604051908082528060200260200182016040528015610af7578160200160208202803683370190505b508460018651610b0791906137e2565b81518110610b1757610b1761362e565b60200260200101819052508067ffffffffffffffff811115610b3b57610b3b613211565b604051908082528060200260200182016040528015610b64578160200160208202803683370190505b508360018551610b7491906137e2565b81518110610b8457610b8461362e565b6020908102919091010152610b998186613616565b945060005b600c54811015610d1157600c8181548110610bbb57610bbb61362e565b600091825260209091206002909102015485516001600160a01b03909116908690610be8906001906137e2565b81518110610bf857610bf861362e565b60200260200101518281518110610c1157610c1161362e565b60200260200101906001600160a01b031690816001600160a01b031681525050612710600c8281548110610c4757610c4761362e565b90600052602060002090600202016001015489610c6491906137f9565b610c6e9190613818565b8460018651610c7d91906137e2565b81518110610c8d57610c8d61362e565b60200260200101518281518110610ca657610ca661362e565b6020026020010181815250508360018551610cc191906137e2565b81518110610cd157610cd161362e565b60200260200101518181518110610cea57610cea61362e565b602002602001015187610cfd9190613616565b965080610d09816137c9565b915050610b9e565b508115610e41577f00000000000000000000000000000000000000000000000000000000000000008460018651610d4891906137e2565b81518110610d5857610d5861362e565b6020026020010151600c8054905081518110610d7657610d7661362e565b6001600160a01b0390921660209283029190910190910152612710610d9b83896137f9565b610da59190613818565b8360018551610db491906137e2565b81518110610dc457610dc461362e565b6020026020010151600c8054905081518110610de257610de261362e565b6020026020010181815250508260018451610dfd91906137e2565b81518110610e0d57610e0d61362e565b6020026020010151600c8054905081518110610e2b57610e2b61362e565b602002602001015186610e3e9190613616565b95505b50505b8315610fec57600084600a54610e5a91906137e2565b600754610e6790876137f9565b610e719190613818565b9050610e7d308261269f565b6000805b8451811015610fe85760005b858281518110610e9f57610e9f61362e565b602002602001015151811015610fd557610eba6001886137e2565b8303610f2857610f2230878481518110610ed657610ed661362e565b60200260200101518381518110610eef57610eef61362e565b6020026020010151610f0030611257565b604051806040016040528060048152602001630307830360e41b81525061273d565b50610fc3565b610fb430878481518110610f3e57610f3e61362e565b60200260200101518381518110610f5757610f5761362e565b6020026020010151878581518110610f7157610f7161362e565b60200260200101518481518110610f8a57610f8a61362e565b6020026020010151604051806040016040528060048152602001630307830360e41b81525061273d565b5082610fbf816137c9565b9350505b80610fcd816137c9565b915050610e8d565b5080610fe0816137c9565b915050610e81565b5050505b600a546040805191825260208201879052810185905233907f04f794b9bb152df3a9f2aa7b424206ce2c2c26ef386bb1fea8325cdfdcd339569060600160405180910390a2505050505050565b61104161275d565b61104a816127b7565b156110975760405162461bcd60e51b815260206004820152601760248201527f537472617465677920616c72656164792065786973747300000000000000000060448201526064016106be565b6110cd6001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001682600019612820565b600980546001810182556000919091527f6e1540171b6c0c960b71a7020d9f60077f6af931a8bbf590da0223dacf75c7af0180546001600160a01b0319166001600160a01b0392909216919091179055565b600061112c848484612968565b6001600160a01b03841660009081526001602090815260408083203384529091529020548211156111b05760405162461bcd60e51b815260206004820152602860248201527f45524332303a207472616e7366657220616d6f756e74206578636565647320616044820152676c6c6f77616e636560c01b60648201526084016106be565b6001600160a01b0384166000908152600160209081526040808320338085529252909120546111eb9186916111e69086906137e2565b61257b565b5060015b9392505050565b600061120285856116d6565b50843b1561124c5761124c33868686868080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250612b3892505050565b506001949350505050565b6001600160a01b038116600090815260066020526040812054819061127b906120ee565b9050606481101561128f5750600092915050565b92915050565b50919050565b6112a361275d565b6112ad6000612ba3565b565b6112b761275d565b604080518082019091526001600160a01b03928316815260208101918252600c805460018101825560009190915290517fdf6966c971051c3d54ec59162606531493a51404a002842f56009d7e5cf4a8c7600290920291820180546001600160a01b0319169190941617909255517fdf6966c971051c3d54ec59162606531493a51404a002842f56009d7e5cf4a8c890910155565b61135461275d565b60095482106113755760405162461bcd60e51b81526004016106be9061383a565b600982815481106113885761138861362e565b60009182526020909120015460405163b6b55f2560e01b8152600481018390526001600160a01b039091169063b6b55f25906024015b600060405180830381600087803b1580156113d857600080fd5b505af11580156113ec573d6000803e3d6000fd5b505050505050565b6113fc61275d565b600b55565b60008061140d600a5490565b9050806000036114205750600092915050565b806007548461142f91906137f9565b6111ef9190613818565b61144161275d565b60095481146114a35760405162461bcd60e51b815260206004820152602860248201527f6e65774f726465722e6c656e677468206d757374203d207374726174656769656044820152670e65cd8cadccee8d60c31b60648201526084016106be565b60095460009067ffffffffffffffff8111156114c1576114c1613211565b6040519080825280602002602001820160405280156114ea578160200160208202803683370190505b50905060005b600954811015611567576009818154811061150d5761150d61362e565b9060005260206000200160009054906101000a90046001600160a01b031682828151811061153d5761153d61362e565b6001600160a01b03909216602092830291909101909101528061155f816137c9565b9150506114f0565b5060005b6009548110156116c15760008285858481811061158a5761158a61362e565b90506020020135815181106115a1576115a161362e565b60200260200101516001600160a01b0316036115ff5760405162461bcd60e51b815260206004820152601960248201527f616c6c20696e6469636573206d7573742062652076616c69640000000000000060448201526064016106be565b818484838181106116125761161261362e565b90506020020135815181106116295761162961362e565b6020026020010151600982815481106116445761164461362e565b6000918252602082200180546001600160a01b0319166001600160a01b039390931692909217909155828585848181106116805761168061362e565b90506020020135815181106116975761169761362e565b6001600160a01b0390921660209283029190910190910152806116b9816137c9565b91505061156b565b50505050565b6060600480546105dd906135a3565b600061066d338484612968565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316331461172b5760405162461bcd60e51b81526004016106be906135d7565b60095461177a5760405162461bcd60e51b815260206004820152601f60248201527f4d757374206265203e2030207374726174656769657320746f207374616b650060448201526064016106be565b6117af6001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016333084612bf5565b6117b7611ed0565b6117c18282612c2d565b80600a60008282546117d39190613616565b90915550506040518181526001600160a01b038316907febedb8b3c678666e7f36970bc8f57abf6d8fa2e828c0da91ea5b75bf68ed101a9060200160405180910390a25050565b61182261275d565b600c5483106118685760405162461bcd60e51b815260206004820152601260248201527111995948191bd95cc81b9bdd08195e1a5cdd60721b60448201526064016106be565b8060000361192857600c8054611880906001906137e2565b815481106118905761189061362e565b9060005260206000209060020201600c84815481106118b1576118b161362e565b60009182526020909120825460029092020180546001600160a01b0319166001600160a01b03909216919091178155600191820154910155600c8054806118fa576118fa613871565b60008281526020812060026000199093019283020180546001600160a01b0319168155600101559055505050565b81600c848154811061193c5761193c61362e565b906000526020600020906002020160000160006101000a8154816001600160a01b0302191690836001600160a01b0316021790555080600c84815481106119855761198561362e565b9060005260206000209060020201600101819055505b505050565b6060600980548060200260200160405190810160405280929190818152602001828054801561065657602002820191906000526020600020905b81546001600160a01b031681526001909101906020018083116119da575050505050905090565b600080611a0c61244b565b9050600a548110611a1f57600091505090565b80600a54611a2d91906137e2565b91505090565b60008060005b600954811015611aed57600060098281548110611a5857611a5861362e565b60009182526020918290200154604080516316f6f48160e31b815290516001600160a01b039092169350839263b7b7a408926004808401938290030181865afa158015611aa9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611acd9190613644565b611ad79084613616565b9250508080611ae5906137c9565b915050611a39565b50600b5415611b1e57612710600b5482611b0791906137f9565b611b119190613818565b611b1b9082613616565b90505b919050565b611b2b61275d565b6009548110611b4c5760405162461bcd60e51b81526004016106be9061383a565b604080516001808252818301909252600091602080830190803683370190505090508181600081518110611b8257611b8261362e565b602002602001018181525050611b97816106ef565b600060098381548110611bac57611bac61362e565b600091825260208083209091015460408051630b45241160e11b815290516001600160a01b039092169450849263168a4822926004808401938290030181865afa158015611bfe573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c229190613644565b90508015611d515780826001600160a01b031663b51459fe6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611c69573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c8d9190613644565b14611cf65760405162461bcd60e51b815260206004820152603360248201527f537472617465677920636f6e7461696e73206465706f7369747320746861742060448201527231b0b73737ba103132903bb4ba34323930bbb760691b60648201526084016106be565b604051632e1a7d4d60e01b8152600481018290526001600160a01b03831690632e1a7d4d90602401600060405180830381600087803b158015611d3857600080fd5b505af1158015611d4c573d6000803e3d6000fd5b505050505b835b600954611d62906001906137e2565b811015611ded576009611d76826001613616565b81548110611d8657611d8661362e565b600091825260209091200154600980546001600160a01b039092169183908110611db257611db261362e565b600091825260209091200180546001600160a01b0319166001600160a01b039290921691909117905580611de5816137c9565b915050611d53565b506009805480611dff57611dff613871565b600082815260208120820160001990810180546001600160a01b03191690559091019091556116c1907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316908490612820565b611e6261275d565b6009548210611e835760405162461bcd60e51b81526004016106be9061383a565b60098281548110611e9657611e9661362e565b600091825260209091200154604051632e1a7d4d60e01b8152600481018390526001600160a01b0390911690632e1a7d4d906024016113be565b6040516370a0823160e01b81523060048201526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a0823190602401602060405180830381865afa158015611f37573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f5b9190613644565b905080156120eb5760005b6009548110156120e957600060098281548110611f8557611f8561362e565b60009182526020808320909101546040805163e78a587560e01b815290516001600160a01b039092169450849263e78a5875926004808401938290030181865afa158015611fd7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ffb9190613644565b90508381106120655760405163b6b55f2560e01b8152600481018590526001600160a01b0383169063b6b55f2590602401600060405180830381600087803b15801561204657600080fd5b505af115801561205a573d6000803e3d6000fd5b5050505050506120e9565b80156120d45760405163b6b55f2560e01b8152600481018290526001600160a01b0383169063b6b55f2590602401600060405180830381600087803b1580156120ad57600080fd5b505af11580156120c1573d6000803e3d6000fd5b5050505080846120d191906137e2565b93505b505080806120e1906137c9565b915050611f66565b505b50565b600060075460000361210257506000919050565b600754600a5461211290846137f9565b61128f9190613818565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031633146121645760405162461bcd60e51b81526004016106be906135d7565b80600181016121795761217684611257565b90505b6040516370a0823160e01b81523060048201526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a0823190602401602060405180830381865afa1580156121e0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122049190613644565b9050808211156122205761222061221b82846137e2565b612c4f565b6040516370a0823160e01b815230600482015282907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a0823190602401602060405180830381865afa158015612286573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122aa9190613644565b101561230b5760405162461bcd60e51b815260206004820152602a60248201527f4e6f7420656e6f756768206c697175696469747920617661696c61626c6520746044820152696f20776974686472617760b01b60648201526084016106be565b6123158583612daa565b81600a600082825461232791906137e2565b9091555061236190506001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000168584612ebe565b846001600160a01b03167f884edad9ce6fa2440d8a54cc123490eb96d2768479d49ff9c7366125a94243648360405161239c91815260200190565b60405180910390a25050505050565b6060600c805480602002602001604051908101604052809291908181526020016000905b82821015612417576000848152602090819020604080518082019091526002850290910180546001600160a01b031682526001908101548284015290835290920191016123cf565b50505050905090565b60008061242b611a33565b9050600a54811161243e57600091505090565b600a54611a2d90826137e2565b60008060005b600954811015611295576000600982815481106124705761247061362e565b600091825260209182902001546040805163eb47dc8f60e01b815290516001600160a01b039092169350839263eb47dc8f926004808401938290030181865afa1580156124c1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124e59190613644565b6124ef9084613616565b92505080806124fd906137c9565b915050612451565b61250d61275d565b6001600160a01b0381166125725760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016106be565b6120eb81612ba3565b6001600160a01b0383166125dd5760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b60648201526084016106be565b6001600160a01b03821661263e5760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b60648201526084016106be565b6001600160a01b0383811660008181526001602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505050565b6001600160a01b0382166126f55760405162461bcd60e51b815260206004820152601860248201527f4d696e7420746f20746865207a65726f2061646472657373000000000000000060448201526064016106be565b80600760008282546127079190613616565b90915550506001600160a01b03821660009081526006602052604081208054839290612734908490613616565b90915550505050565b600061274a858585612968565b833b1561124c5761124c85858585612b38565b6008546001600160a01b031633146112ad5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016106be565b6000805b60095481101561281757826001600160a01b0316600982815481106127e2576127e261362e565b6000918252602090912001546001600160a01b0316036128055750600192915050565b8061280f816137c9565b9150506127bb565b50600092915050565b80158061289a5750604051636eb1769f60e11b81523060048201526001600160a01b03838116602483015284169063dd62ed3e90604401602060405180830381865afa158015612874573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906128989190613644565b155b6129055760405162461bcd60e51b815260206004820152603660248201527f5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f60448201527520746f206e6f6e2d7a65726f20616c6c6f77616e636560501b60648201526084016106be565b6040516001600160a01b03831660248201526044810182905261199b90849063095ea7b360e01b906064015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152612eee565b600061297382611401565b90506001600160a01b0384166129cb5760405162461bcd60e51b815260206004820152601e60248201527f5472616e736665722066726f6d20746865207a65726f2061646472657373000060448201526064016106be565b6001600160a01b038316612a215760405162461bcd60e51b815260206004820152601c60248201527f5472616e7366657220746f20746865207a65726f20616464726573730000000060448201526064016106be565b6001600160a01b038416600090815260066020526040902054811115612a895760405162461bcd60e51b815260206004820152601f60248201527f5472616e7366657220616d6f756e7420657863656564732062616c616e63650060448201526064016106be565b6001600160a01b03841660009081526006602052604081208054839290612ab19084906137e2565b90915550506001600160a01b03831660009081526006602052604081208054839290612ade908490613616565b92505081905550826001600160a01b0316846001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef84604051612b2a91815260200190565b60405180910390a350505050565b604051635260769b60e11b815283906001600160a01b0382169063a4c0ed3690612b6a90889087908790600401613887565b600060405180830381600087803b158015612b8457600080fd5b505af1158015612b98573d6000803e3d6000fd5b505050505050505050565b600880546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6040516001600160a01b03808516602483015283166044820152606481018290526116c19085906323b872dd60e01b90608401612931565b6000612c3882611401565b905080600003612c455750805b61199b838261269f565b60095481905b801561199b5760006009612c6a6001846137e2565b81548110612c7a57612c7a61362e565b600091825260208083209091015460408051635a8a2cff60e11b815290516001600160a01b039092169450849263b51459fe926004808401938290030181865afa158015612ccc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612cf09190613644565b9050838110612d2657604051632e1a7d4d60e01b8152600481018590526001600160a01b03831690632e1a7d4d90602401612b6a565b8015612d9557604051632e1a7d4d60e01b8152600481018290526001600160a01b03831690632e1a7d4d90602401600060405180830381600087803b158015612d6e57600080fd5b505af1158015612d82573d6000803e3d6000fd5b505050508084612d9291906137e2565b93505b50508080612da2906138b7565b915050612c55565b6000612db582611401565b90506001600160a01b038316612e0d5760405162461bcd60e51b815260206004820152601a60248201527f4275726e2066726f6d20746865207a65726f206164647265737300000000000060448201526064016106be565b6001600160a01b038316600090815260066020526040902054811115612e755760405162461bcd60e51b815260206004820152601b60248201527f4275726e20616d6f756e7420657863656564732062616c616e6365000000000060448201526064016106be565b8060076000828254612e8791906137e2565b90915550506001600160a01b03831660009081526006602052604081208054839290612eb49084906137e2565b9091555050505050565b6040516001600160a01b03831660248201526044810182905261199b90849063a9059cbb60e01b90606401612931565b6000612f43826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316612fc09092919063ffffffff16565b80519091501561199b5780806020019051810190612f6191906138ce565b61199b5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b60648201526084016106be565b6060612fcf8484600085612fd7565b949350505050565b6060824710156130385760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b60648201526084016106be565b6001600160a01b0385163b61308f5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016106be565b600080866001600160a01b031685876040516130ab91906138f0565b60006040518083038185875af1925050503d80600081146130e8576040519150601f19603f3d011682016040523d82523d6000602084013e6130ed565b606091505b50915091506130fd828286613108565b979650505050505050565b606083156131175750816111ef565b8251156131275782518084602001fd5b8160405162461bcd60e51b81526004016106be9190613199565b60005b8381101561315c578181015183820152602001613144565b838111156116c15750506000910152565b60008151808452613185816020860160208601613141565b601f01601f19169290920160200192915050565b6020815260006111ef602083018461316d565b6001600160a01b03811681146120eb57600080fd5b600080604083850312156131d457600080fd5b82356131df816131ac565b946020939093013593505050565b6000602082840312156131ff57600080fd5b813561ffff811681146111ef57600080fd5b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff8111828210171561325057613250613211565b604052919050565b600067ffffffffffffffff82111561327257613272613211565b5060051b60200190565b6000602080838503121561328f57600080fd5b823567ffffffffffffffff8111156132a657600080fd5b8301601f810185136132b757600080fd5b80356132ca6132c582613258565b613227565b81815260059190911b820183019083810190878311156132e957600080fd5b928401925b828410156130fd578335825292840192908401906132ee565b60006020828403121561331957600080fd5b81356111ef816131ac565b60008060006060848603121561333957600080fd5b8335613344816131ac565b92506020840135613354816131ac565b929592945050506040919091013590565b6000806000806060858703121561337b57600080fd5b8435613386816131ac565b935060208501359250604085013567ffffffffffffffff808211156133aa57600080fd5b818701915087601f8301126133be57600080fd5b8135818111156133cd57600080fd5b8860208285010111156133df57600080fd5b95989497505060200194505050565b6000806040838503121561340157600080fd5b50508035926020909101359150565b60006020828403121561342257600080fd5b5035919050565b6000806020838503121561343c57600080fd5b823567ffffffffffffffff8082111561345457600080fd5b818501915085601f83011261346857600080fd5b81358181111561347757600080fd5b8660208260051b850101111561348c57600080fd5b60209290920196919550909350505050565b6000806000606084860312156134b357600080fd5b833592506020840135613354816131ac565b6020808252825182820181905260009190848201906040850190845b818110156135065783516001600160a01b0316835292840192918401916001016134e1565b50909695505050505050565b602080825282518282018190526000919060409081850190868401855b8281101561355d57815180516001600160a01b0316855286015186850152928401929085019060010161352f565b5091979650505050505050565b6000806040838503121561357d57600080fd5b8235613588816131ac565b91506020830135613598816131ac565b809150509250929050565b600181811c908216806135b757607f821691505b60208210810361129557634e487b7160e01b600052602260045260246000fd5b6020808252600f908201526e506f6f6c526f75746572206f6e6c7960881b604082015260600190565b634e487b7160e01b600052601160045260246000fd5b6000821982111561362957613629613600565b500190565b634e487b7160e01b600052603260045260246000fd5b60006020828403121561365657600080fd5b5051919050565b600082601f83011261366e57600080fd5b8151602061367e6132c583613258565b82815260059290921b8401810191818101908684111561369d57600080fd5b8286015b848110156136b857805183529183019183016136a1565b509695505050505050565b600080604083850312156136d657600080fd5b825167ffffffffffffffff808211156136ee57600080fd5b818501915085601f83011261370257600080fd5b815160206137126132c583613258565b82815260059290921b8401810191818101908984111561373157600080fd5b948201945b83861015613758578551613749816131ac565b82529482019490820190613736565b9188015191965090935050508082111561377157600080fd5b5061377e8582860161365d565b9150509250929050565b600080821280156001600160ff1b03849003851316156137aa576137aa613600565b600160ff1b83900384128116156137c3576137c3613600565b50500190565b6000600182016137db576137db613600565b5060010190565b6000828210156137f4576137f4613600565b500390565b600081600019048311821515161561381357613813613600565b500290565b60008261383557634e487b7160e01b600052601260045260246000fd5b500490565b60208082526017908201527f537472617465677920646f6573206e6f74206578697374000000000000000000604082015260600190565b634e487b7160e01b600052603160045260246000fd5b60018060a01b03841681528260208201526060604082015260006138ae606083018461316d565b95945050505050565b6000816138c6576138c6613600565b506000190190565b6000602082840312156138e057600080fd5b815180151581146111ef57600080fd5b60008251613902818460208701613141565b919091019291505056fea264697066735822122064b6b1291e6325ed142b3e529220f7e4845f954e5abd362aa23d82a596e0d10c64736f6c634300080f0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "addFee(address,uint256)": {
        "params": {
          "_feeBasisPoints": "fee in basis points*",
          "_receiver": "receiver of fee"
        }
      },
      "addStrategy(address)": {
        "params": {
          "_strategy": "address of strategy to add*"
        }
      },
      "allowance(address,address)": {
        "details": "Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called."
      },
      "approve(address,uint256)": {
        "details": "Sets `amount` as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event."
      },
      "balanceOf(address)": {
        "params": {
          "_account": "account to return balance for"
        },
        "returns": {
          "_0": "account's stake balance*"
        }
      },
      "canDeposit()": {
        "returns": {
          "_0": "available deposit room"
        }
      },
      "canWithdraw()": {
        "returns": {
          "_0": "available withdrawal room"
        }
      },
      "depositLiquidity()": {
        "details": "deposits into strategies[0] until its limit is reached, then strategies[1], and so on*"
      },
      "getFees()": {
        "returns": {
          "_0": "list of fees"
        }
      },
      "getMaxDeposits()": {
        "returns": {
          "_0": "the overall staking limit*"
        }
      },
      "getMinDeposits()": {
        "returns": {
          "_0": "min deposit"
        }
      },
      "getSharesByStake(uint256)": {
        "params": {
          "_amount": "staked amount"
        },
        "returns": {
          "_0": "amount of shares*"
        }
      },
      "getStakeByShares(uint256)": {
        "params": {
          "_amount": "shares amount"
        },
        "returns": {
          "_0": "amount of stake*"
        }
      },
      "getStrategies()": {
        "returns": {
          "_0": "list of strategies"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "removeStrategy(uint256)": {
        "params": {
          "_index": "index of strategy to remove*"
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "reorderStrategies(uint256[])": {
        "params": {
          "_newOrder": "array containing strategy indexes in a new order*"
        }
      },
      "setLiquidityBuffer(uint256)": {
        "params": {
          "_liquidityBufferBasisPoints": "basis points to use for the liquidity buffer*"
        }
      },
      "setPoolIndex(uint16)": {
        "params": {
          "_poolIndex": "index of pool"
        }
      },
      "sharesOf(address)": {
        "params": {
          "_account": "account to return balance for"
        },
        "returns": {
          "_0": "account's share balance*"
        }
      },
      "stake(address,uint256)": {
        "params": {
          "_account": "account to stake for",
          "_amount": "amount to stake*"
        }
      },
      "strategyDeposit(uint256,uint256)": {
        "params": {
          "_amount": "amount to deposit*",
          "_index": "index of strategy to deposit in"
        }
      },
      "strategyWithdraw(uint256,uint256)": {
        "params": {
          "_amount": "amount to withdraw*",
          "_index": "index of strategy to withdraw from"
        }
      },
      "totalSupply()": {
        "returns": {
          "_0": "total supply"
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "updateFee(uint256,address,uint256)": {
        "params": {
          "_feeBasisPoints": "fee in basis points*",
          "_index": "index of fee",
          "_receiver": "receiver of fee"
        }
      },
      "updateStrategyRewards(uint256[])": {
        "params": {
          "_strategyIdxs": "indexes of strategies to update rewards for*"
        }
      },
      "withdraw(address,address,uint256)": {
        "details": "will withdraw from strategies if not enough liquidity",
        "params": {
          "_account": "account to withdraw for",
          "_amount": "amount to withdraw*",
          "_receiver": "address to receive withdrawal"
        }
      }
    },
    "title": "Staking Pool",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "addFee(address,uint256)": {
        "notice": "adds a new fee"
      },
      "addStrategy(address)": {
        "notice": "adds a new strategy"
      },
      "balanceOf(address)": {
        "notice": "returns an account's stake balance"
      },
      "canDeposit()": {
        "notice": "returns the available deposit room for this pool"
      },
      "canWithdraw()": {
        "notice": "returns the available withdrawal room for this pool"
      },
      "depositLiquidity()": {
        "notice": "deposits available liquidity into strategies by order of priority"
      },
      "getFees()": {
        "notice": "returns a list of all fees"
      },
      "getMaxDeposits()": {
        "notice": "returns the maximum amount that can be staked via the pool"
      },
      "getMinDeposits()": {
        "notice": "returns the minimum amount that must remain the pool"
      },
      "getSharesByStake(uint256)": {
        "notice": "returns the amount of shares that corresponds to a staked amount"
      },
      "getStakeByShares(uint256)": {
        "notice": "returns the amount of stake that corresponds to an amount of shares"
      },
      "getStrategies()": {
        "notice": "returns a list of all active strategies"
      },
      "removeStrategy(uint256)": {
        "notice": "removes a strategy"
      },
      "reorderStrategies(uint256[])": {
        "notice": "reorders strategies"
      },
      "setLiquidityBuffer(uint256)": {
        "notice": "Sets the liquidity buffer. The liquidity buffer will increase the max staking limit of the pool by always keeping a % of the staked token as liquid within the pool. The buffer has the effect of diluting yield, but promotes pool liquidity with any lock-in that would prevent the un-wind of allowance."
      },
      "setPoolIndex(uint16)": {
        "notice": "sets the index of this pool as stored in the pool router"
      },
      "sharesOf(address)": {
        "notice": "returns an account's share balance"
      },
      "stake(address,uint256)": {
        "notice": "stakes asset tokens and mints derivative tokens"
      },
      "strategyDeposit(uint256,uint256)": {
        "notice": "deposits assets in a strategy"
      },
      "strategyWithdraw(uint256,uint256)": {
        "notice": "withdraws assets from a strategy"
      },
      "totalSupply()": {
        "notice": "returns the total supply of staking derivative tokens"
      },
      "updateFee(uint256,address,uint256)": {
        "notice": "updates an existing fee"
      },
      "updateStrategyRewards(uint256[])": {
        "notice": "updates and distributes rewards based on balance changes in strategies"
      },
      "withdraw(address,address,uint256)": {
        "notice": "withdraws asset tokens and burns derivative tokens"
      }
    },
    "notice": "Allows users to stake an asset and receive derivative tokens 1:1, then deposits staked assets into strategy contracts to earn returns",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 23140,
        "contract": "contracts/core/StakingPool.sol:StakingPool",
        "label": "_balances",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 23146,
        "contract": "contracts/core/StakingPool.sol:StakingPool",
        "label": "_allowances",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 23148,
        "contract": "contracts/core/StakingPool.sol:StakingPool",
        "label": "_totalSupply",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 23150,
        "contract": "contracts/core/StakingPool.sol:StakingPool",
        "label": "_name",
        "offset": 0,
        "slot": "3",
        "type": "t_string_storage"
      },
      {
        "astId": 23152,
        "contract": "contracts/core/StakingPool.sol:StakingPool",
        "label": "_symbol",
        "offset": 0,
        "slot": "4",
        "type": "t_string_storage"
      },
      {
        "astId": 23154,
        "contract": "contracts/core/StakingPool.sol:StakingPool",
        "label": "_decimals",
        "offset": 0,
        "slot": "5",
        "type": "t_uint8"
      },
      {
        "astId": 18899,
        "contract": "contracts/core/StakingPool.sol:StakingPool",
        "label": "shares",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 18901,
        "contract": "contracts/core/StakingPool.sol:StakingPool",
        "label": "totalShares",
        "offset": 0,
        "slot": "7",
        "type": "t_uint256"
      },
      {
        "astId": 3767,
        "contract": "contracts/core/StakingPool.sol:StakingPool",
        "label": "_owner",
        "offset": 0,
        "slot": "8",
        "type": "t_address"
      },
      {
        "astId": 16566,
        "contract": "contracts/core/StakingPool.sol:StakingPool",
        "label": "strategies",
        "offset": 0,
        "slot": "9",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 16568,
        "contract": "contracts/core/StakingPool.sol:StakingPool",
        "label": "totalStaked",
        "offset": 0,
        "slot": "10",
        "type": "t_uint256"
      },
      {
        "astId": 16570,
        "contract": "contracts/core/StakingPool.sol:StakingPool",
        "label": "liquidityBuffer",
        "offset": 0,
        "slot": "11",
        "type": "t_uint256"
      },
      {
        "astId": 16574,
        "contract": "contracts/core/StakingPool.sol:StakingPool",
        "label": "fees",
        "offset": 0,
        "slot": "12",
        "type": "t_array(t_struct(Fee)16563_storage)dyn_storage"
      },
      {
        "astId": 16580,
        "contract": "contracts/core/StakingPool.sol:StakingPool",
        "label": "poolIndex",
        "offset": 0,
        "slot": "13",
        "type": "t_uint16"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(Fee)16563_storage)dyn_storage": {
        "base": "t_struct(Fee)16563_storage",
        "encoding": "dynamic_array",
        "label": "struct StakingPool.Fee[]",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Fee)16563_storage": {
        "encoding": "inplace",
        "label": "struct StakingPool.Fee",
        "members": [
          {
            "astId": 16560,
            "contract": "contracts/core/StakingPool.sol:StakingPool",
            "label": "receiver",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 16562,
            "contract": "contracts/core/StakingPool.sol:StakingPool",
            "label": "basisPoints",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint16": {
        "encoding": "inplace",
        "label": "uint16",
        "numberOfBytes": "2"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}